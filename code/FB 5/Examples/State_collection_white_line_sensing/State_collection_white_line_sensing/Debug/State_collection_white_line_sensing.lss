
State_collection_white_line_sensing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000daa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000023  00800200  00800200  00000e1e  2**0
                  ALLOC
  2 .stab         00002184  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006a8  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00003650  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001017  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002da  00000000  00000000  00004727  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006da  00000000  00000000  00004a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  000050dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00005380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e6  00000000  00000000  0000570e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_45>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 32       	cpi	r26, 0x23	; 35
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <main>
 122:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_adc_pinconfig>:
* Example Call:		_adc_pinconfig()
*
*/
void _adc_pinconfig (void)
{
	DDRF = DDRF & 0x01;  //set PORTF direction as input
 12a:	80 b3       	in	r24, 0x10	; 16
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	80 bb       	out	0x10, r24	; 16
	PORTF = 0x00; //set PORTF pins floating
 130:	11 ba       	out	0x11, r1	; 17
	DDRK = DDRK & 0xC0;  //set PORTK direction as input
 132:	e7 e0       	ldi	r30, 0x07	; 7
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	80 81       	ld	r24, Z
 138:	80 7c       	andi	r24, 0xC0	; 192
 13a:	80 83       	st	Z, r24
	PORTK = 0x00; //set PORTK pins floating
 13c:	10 92 08 01 	sts	0x0108, r1
}
 140:	08 95       	ret

00000142 <_adc_init>:
* Example Call:		_adc_init()
*
*/
void _adc_init(void)
{
	ADCSRA = 0x00;
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 148:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1(result is left adjusted) --- MUX4:0 = 0000
 14c:	80 e2       	ldi	r24, 0x20	; 32
 14e:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;        //Analog comparator disable to reduce power consumption
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1(ADC enable)  --- ADPS2:0 = 1 1 0
 156:	86 e8       	ldi	r24, 0x86	; 134
 158:	80 83       	st	Z, r24
}
 15a:	08 95       	ret

0000015c <_conv_adc>:
*
*/
unsigned char _conv_adc(unsigned char ch)
{
	unsigned char a;     // digital value which stores the digital value of ADCH register
	if(ch>7)
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	18 f0       	brcs	.+6      	; 0x166 <_conv_adc+0xa>
	{
		ADCSRB = 0x08;
 160:	98 e0       	ldi	r25, 0x08	; 8
 162:	90 93 7b 00 	sts	0x007B, r25
	}
	ch = ch & 0x07;			  //Store only 3 LSB bits
 166:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20 | ch;		 //Select the ADC channel with left adjust select
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;	 //Set start conversion bit
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
 178:	80 81       	ld	r24, Z
 17a:	84 ff       	sbrs	r24, 4
 17c:	fd cf       	rjmp	.-6      	; 0x178 <_conv_adc+0x1c>
	a=ADCH;
 17e:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10;   //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	90 81       	ld	r25, Z
 188:	90 61       	ori	r25, 0x10	; 16
 18a:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 18c:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 190:	08 95       	ret

00000192 <converttomm_41sk>:
* Output:           Distance in mm
* Example Call:		converttomm_41sk(_conv_adc(9));
*
*/
unsigned int converttomm_41sk(unsigned int a)//conversion of sharp sensor values.
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
	double b;
	b=a;
 196:	bc 01       	movw	r22, r24
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 bb 05 	call	0xb76	; 0xb76 <__floatunsisf>
	b = b*0.001240875;
 1a0:	46 2f       	mov	r20, r22
 1a2:	57 2f       	mov	r21, r23
 1a4:	68 2f       	mov	r22, r24
 1a6:	79 2f       	mov	r23, r25
 1a8:	cb 01       	movw	r24, r22
 1aa:	ba 01       	movw	r22, r20
 1ac:	2b ed       	ldi	r18, 0xDB	; 219
 1ae:	34 ea       	ldi	r19, 0xA4	; 164
 1b0:	42 ea       	ldi	r20, 0xA2	; 162
 1b2:	5a e3       	ldi	r21, 0x3A	; 58
 1b4:	0e 94 49 06 	call	0xc92	; 0xc92 <__mulsf3>
	b = b+0.005;
 1b8:	46 2f       	mov	r20, r22
 1ba:	57 2f       	mov	r21, r23
 1bc:	68 2f       	mov	r22, r24
 1be:	79 2f       	mov	r23, r25
 1c0:	cb 01       	movw	r24, r22
 1c2:	ba 01       	movw	r22, r20
 1c4:	2a e0       	ldi	r18, 0x0A	; 10
 1c6:	37 ed       	ldi	r19, 0xD7	; 215
 1c8:	43 ea       	ldi	r20, 0xA3	; 163
 1ca:	5b e3       	ldi	r21, 0x3B	; 59
 1cc:	0e 94 be 04 	call	0x97c	; 0x97c <__addsf3>
 1d0:	b6 2f       	mov	r27, r22
 1d2:	a7 2f       	mov	r26, r23
 1d4:	38 2f       	mov	r19, r24
 1d6:	29 2f       	mov	r18, r25
	b = 10/b;
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	91 e4       	ldi	r25, 0x41	; 65
 1e0:	42 2f       	mov	r20, r18
 1e2:	0b 2f       	mov	r16, r27
 1e4:	1a 2f       	mov	r17, r26
 1e6:	23 2f       	mov	r18, r19
 1e8:	34 2f       	mov	r19, r20
 1ea:	a9 01       	movw	r20, r18
 1ec:	98 01       	movw	r18, r16
 1ee:	0e 94 22 05 	call	0xa44	; 0xa44 <__divsf3>
	b = b-24.2;
 1f2:	46 2f       	mov	r20, r22
 1f4:	57 2f       	mov	r21, r23
 1f6:	68 2f       	mov	r22, r24
 1f8:	79 2f       	mov	r23, r25
 1fa:	cb 01       	movw	r24, r22
 1fc:	ba 01       	movw	r22, r20
 1fe:	2a e9       	ldi	r18, 0x9A	; 154
 200:	39 e9       	ldi	r19, 0x99	; 153
 202:	41 ec       	ldi	r20, 0xC1	; 193
 204:	51 e4       	ldi	r21, 0x41	; 65
 206:	0e 94 bd 04 	call	0x97a	; 0x97a <__subsf3>
	b = (int)b;
 20a:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixsfsi>
 20e:	88 27       	eor	r24, r24
 210:	77 fd       	sbrc	r23, 7
 212:	80 95       	com	r24
 214:	98 2f       	mov	r25, r24
 216:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__floatsisf>
	return b;
 21a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fixunssfsi>
}
 21e:	86 2f       	mov	r24, r22
 220:	97 2f       	mov	r25, r23
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <_timer4_init>:
* Example Call:		NONE
*
*/
void _timer4_init(void)
{
	TCCR4B = 0x00; //stop
 228:	e1 ea       	ldi	r30, 0xA1	; 161
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	10 82       	st	Z, r1
	OCR4AH = 0x00; //Output Compare Register (OCR)- Not used
 22e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
 232:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
 236:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
 23a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
 23e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
 242:	10 92 ac 00 	sts	0x00AC, r1
	ICR4   = 0x7080; //Input Capture Register (ICR)  
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	90 e7       	ldi	r25, 0x70	; 112
 24a:	90 93 a7 00 	sts	0x00A7, r25
 24e:	80 93 a6 00 	sts	0x00A6, r24
	TCCR4C = 0x00;
 252:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4A = 0b00000010;// Normal port operation........WGM41:40=1 0
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	80 93 a0 00 	sts	0x00A0, r24
	TCCR4B = 0b00011100; //start Timer.......WGM43:42=1 1........CS42:40=1 0 0(clkI/O/256 (From prescaler)) 
 25c:	8c e1       	ldi	r24, 0x1C	; 28
 25e:	80 83       	st	Z, r24
}
 260:	08 95       	ret

00000262 <send>:

void send ( int n)
{
	int z = 0;
	int c = n;
	a[0] = 0;
 262:	10 92 1b 02 	sts	0x021B, r1
	a[1] = 0;
 266:	10 92 1c 02 	sts	0x021C, r1
	a[2] = 0;
 26a:	10 92 1d 02 	sts	0x021D, r1
	while (c)
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	61 f0       	breq	.+24     	; 0x28a <send+0x28>
 272:	eb e1       	ldi	r30, 0x1B	; 27
 274:	f2 e0       	ldi	r31, 0x02	; 2
	{ // loop till there's nothing left
		a[z++] = (char)(c % 10); // assign the last digit
 276:	2a e0       	ldi	r18, 0x0A	; 10
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	0e 94 c0 06 	call	0xd80	; 0xd80 <__divmodhi4>
 280:	81 93       	st	Z+, r24
		c /= 10; // "right shift" the number
 282:	86 2f       	mov	r24, r22
 284:	97 2f       	mov	r25, r23
	int z = 0;
	int c = n;
	a[0] = 0;
	a[1] = 0;
	a[2] = 0;
	while (c)
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	c1 f7       	brne	.-16     	; 0x27a <send+0x18>
	{ // loop till there's nothing left
		a[z++] = (char)(c % 10); // assign the last digit
		c /= 10; // "right shift" the number
	}
	
	UDR0 = a[2] + 48;   //sending the first digit
 28a:	80 91 1d 02 	lds	r24, 0x021D
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))   
 294:	e0 ec       	ldi	r30, 0xC0	; 192
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	85 ff       	sbrs	r24, 5
 29c:	fd cf       	rjmp	.-6      	; 0x298 <send+0x36>
	{
		//waiting for transmission to complete
	}
	UDR0 = a[1] + 48; //sending the second digit
 29e:	80 91 1c 02 	lds	r24, 0x021C
 2a2:	80 5d       	subi	r24, 0xD0	; 208
 2a4:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 2a8:	e0 ec       	ldi	r30, 0xC0	; 192
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	85 ff       	sbrs	r24, 5
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <send+0x4a>
	{
		//waiting for transmission to complete
	}
	UDR0 = a[0] + 48; //sending the third digit
 2b2:	80 91 1b 02 	lds	r24, 0x021B
 2b6:	80 5d       	subi	r24, 0xD0	; 208
 2b8:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 2bc:	e0 ec       	ldi	r30, 0xC0	; 192
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	85 ff       	sbrs	r24, 5
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <send+0x5e>
	{
		//waiting for transmission to complete
	}
	UDR0 = 32;      //to give space between two integer
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 2cc:	e0 ec       	ldi	r30, 0xC0	; 192
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	85 ff       	sbrs	r24, 5
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <send+0x6e>
	{
		//waiting for transmission to complete
	}
}
 2d6:	08 95       	ret

000002d8 <getdigital>:
*
*/

void getdigital(void)
{
	 lwl= _conv_adc(3);  	//Getting data of Left WL Sensor
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 2de:	80 93 07 02 	sts	0x0207, r24
	 cwl = _conv_adc(2);	//Getting data of Center WL Sensor
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 2e8:	80 93 06 02 	sts	0x0206, r24
	 rwl = _conv_adc(1);	//Getting data of Right WL Sensor
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 2f2:	80 93 05 02 	sts	0x0205, r24
	 sp1 = _conv_adc(9);     //Getting data of sharp sensor1.
 2f6:	89 e0       	ldi	r24, 0x09	; 9
 2f8:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 2fc:	80 93 11 02 	sts	0x0211, r24
	 sp2 = _conv_adc(10);    //Getting data of sharp sensor2.
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 306:	80 93 12 02 	sts	0x0212, r24
	 sp3 = _conv_adc(11);    //Getting data of sharp sensor3.
 30a:	8b e0       	ldi	r24, 0x0B	; 11
 30c:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 310:	80 93 18 02 	sts	0x0218, r24
	 sp4 = _conv_adc(12);    //Getting data of sharp sensor4.
 314:	8c e0       	ldi	r24, 0x0C	; 12
 316:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 31a:	80 93 1e 02 	sts	0x021E, r24
         sp5 = _conv_adc(13);    //Getting data of sharp sensor5.
 31e:	8d e0       	ldi	r24, 0x0D	; 13
 320:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 324:	80 93 0a 02 	sts	0x020A, r24
	 IR1 = _conv_adc(4);     //Getting value of IR proximity sensor1.
 328:	84 e0       	ldi	r24, 0x04	; 4
 32a:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 32e:	80 93 14 02 	sts	0x0214, r24
	 IR2 = _conv_adc(5);     //Getting value of IR proximity sensor2.
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 338:	80 93 0b 02 	sts	0x020B, r24
	 IR3 = _conv_adc(6);     //Getting value of IR proximity sensor3.
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 342:	80 93 0e 02 	sts	0x020E, r24
	 IR4 = _conv_adc(7);     //Getting value of IR proximity sensor4.
 346:	87 e0       	ldi	r24, 0x07	; 7
 348:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 34c:	80 93 17 02 	sts	0x0217, r24
         IR5 = _conv_adc(8);     //Getting value of IR proximity sensor5.
 350:	88 e0       	ldi	r24, 0x08	; 8
 352:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 356:	80 93 04 02 	sts	0x0204, r24

	 
	
}
 35a:	08 95       	ret

0000035c <__vector_45>:
* Logic:			   Timer 4 is configured as such that it gets overflow in  every 0.5 seconds so 
                                   that the sensor readings & wheel velocity are updated and sent continuously.
* Example Call:		           NONE
*/
ISR(TIMER4_OVF_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	0b b6       	in	r0, 0x3b	; 59
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	     cli();                 //Clears the global interrupt
 382:	f8 94       	cli
		getdigital();           //stores digital value of sensors in different variables.
 384:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <getdigital>
		//sensor_data_interpretation();
		send(count);
 388:	80 91 08 02 	lds	r24, 0x0208
 38c:	90 91 09 02 	lds	r25, 0x0209
 390:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(lwl);                  //send the value of left white line sensor
 394:	80 91 07 02 	lds	r24, 0x0207
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(cwl);                  //send the value of center white line sensor
 39e:	80 91 06 02 	lds	r24, 0x0206
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(rwl);                  //send the value of right white line sensor
 3a8:	80 91 05 02 	lds	r24, 0x0205
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(converttomm_41sk(sp1));//send the value of sharp sensor 1
 3b2:	80 91 11 02 	lds	r24, 0x0211
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 c9 00 	call	0x192	; 0x192 <converttomm_41sk>
 3bc:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(converttomm_41sk(sp2));//send the value of sharp sensor 2
 3c0:	80 91 12 02 	lds	r24, 0x0212
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 c9 00 	call	0x192	; 0x192 <converttomm_41sk>
 3ca:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(converttomm_41sk(sp3));//send the value of sharp sensor 3 
 3ce:	80 91 18 02 	lds	r24, 0x0218
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 c9 00 	call	0x192	; 0x192 <converttomm_41sk>
 3d8:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(converttomm_41sk(sp4));//send the value of sharp sensor 4
 3dc:	80 91 1e 02 	lds	r24, 0x021E
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 c9 00 	call	0x192	; 0x192 <converttomm_41sk>
 3e6:	0e 94 31 01 	call	0x262	; 0x262 <send>
                send(converttomm_41sk(sp5));//send the value of sharp sensor 5
 3ea:	80 91 0a 02 	lds	r24, 0x020A
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 c9 00 	call	0x192	; 0x192 <converttomm_41sk>
 3f4:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(IR1);                  //send the value of proximity sensor1
 3f8:	80 91 14 02 	lds	r24, 0x0214
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(IR2);                  //send the value of proximity sensor2
 402:	80 91 0b 02 	lds	r24, 0x020B
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 31 01 	call	0x262	; 0x262 <send>
                send(IR3);                  //send the value of proximity sensor3
 40c:	80 91 0e 02 	lds	r24, 0x020E
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(IR4);                  //send the value of proximity sensor4
 416:	80 91 17 02 	lds	r24, 0x0217
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 31 01 	call	0x262	; 0x262 <send>
                send(IR5);                  //send the value of proximity sensor5
 420:	80 91 04 02 	lds	r24, 0x0204
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 31 01 	call	0x262	; 0x262 <send>
		count++;                      //increase the value of count
 42a:	80 91 08 02 	lds	r24, 0x0208
 42e:	90 91 09 02 	lds	r25, 0x0209
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	90 93 09 02 	sts	0x0209, r25
 438:	80 93 08 02 	sts	0x0208, r24
		sei();                        //enables the global interrupt      
 43c:	78 94       	sei
}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0b be       	out	0x3b, r0	; 59
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <_uart0_init>:
* Example Call:		               _uart0_init();
*/

void _uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 464:	e1 ec       	ldi	r30, 0xC1	; 193
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 46a:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;//asynchronous usart..........character size:8-bit
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	80 93 c2 00 	sts	0x00C2, r24
	//baud rate setting;9600
	UBRR0L = 0x5F; //set baud rate lo
 474:	8f e5       	ldi	r24, 0x5F	; 95
 476:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
 47a:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
 47e:	88 e9       	ldi	r24, 0x98	; 152
 480:	80 83       	st	Z, r24
}
 482:	08 95       	ret

00000484 <_port_init>:
* Example Call:		               _port_init();
*/
void _port_init()
{

	_adc_pinconfig();
 484:	0e 94 95 00 	call	0x12a	; 0x12a <_adc_pinconfig>
}	
 488:	08 95       	ret

0000048a <_start_collection>:
	* Logic :            NONE
	* Example Call:		 _start_collection();
	*/
void _start_collection()
{
	cli();         //Clears the global interrupt
 48a:	f8 94       	cli
	_port_init();  //Initializes all the ports
 48c:	0e 94 42 02 	call	0x484	; 0x484 <_port_init>
	_timer4_init();
 490:	0e 94 14 01 	call	0x228	; 0x228 <_timer4_init>
	_adc_init();
 494:	0e 94 a1 00 	call	0x142	; 0x142 <_adc_init>
	_uart0_init(); //Initialize UART0 for wireless serial communication
 498:	0e 94 32 02 	call	0x464	; 0x464 <_uart0_init>
	TIMSK4 = 0x01; //Timer/Counter 4 Overflow interrupt is enabled
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 72 00 	sts	0x0072, r24
	sei();         // Enables the global interrupt
 4a2:	78 94       	sei
}
 4a4:	08 95       	ret

000004a6 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a6:	86 e6       	ldi	r24, 0x66	; 102
 4a8:	9e e0       	ldi	r25, 0x0E	; 14
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <lcd_set_4bit+0x4>
 4ae:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 4b0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 4b2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 4b8:	42 9a       	sbi	0x08, 2	; 8
 4ba:	ef ef       	ldi	r30, 0xFF	; 255
 4bc:	f7 e4       	ldi	r31, 0x47	; 71
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <lcd_set_4bit+0x18>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <lcd_set_4bit+0x1e>
 4c4:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 4c6:	42 98       	cbi	0x08, 2	; 8
 4c8:	e6 e6       	ldi	r30, 0x66	; 102
 4ca:	fe e0       	ldi	r31, 0x0E	; 14
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <lcd_set_4bit+0x26>
 4d0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 4d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 4d4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 4d6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 4d8:	42 9a       	sbi	0x08, 2	; 8
 4da:	ef ef       	ldi	r30, 0xFF	; 255
 4dc:	f7 e4       	ldi	r31, 0x47	; 71
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <lcd_set_4bit+0x38>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <lcd_set_4bit+0x3e>
 4e4:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 4e6:	42 98       	cbi	0x08, 2	; 8
 4e8:	e6 e6       	ldi	r30, 0x66	; 102
 4ea:	fe e0       	ldi	r31, 0x0E	; 14
 4ec:	31 97       	sbiw	r30, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <lcd_set_4bit+0x46>
 4f0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 4f2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 4f4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 4f6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 4f8:	42 9a       	sbi	0x08, 2	; 8
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	97 e4       	ldi	r25, 0x47	; 71
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_set_4bit+0x58>
 502:	00 c0       	rjmp	.+0      	; 0x504 <lcd_set_4bit+0x5e>
 504:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 506:	42 98       	cbi	0x08, 2	; 8
 508:	e6 e6       	ldi	r30, 0x66	; 102
 50a:	fe e0       	ldi	r31, 0x0E	; 14
 50c:	31 97       	sbiw	r30, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <lcd_set_4bit+0x66>
 510:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 512:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 514:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 51a:	42 9a       	sbi	0x08, 2	; 8
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	97 e4       	ldi	r25, 0x47	; 71
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <lcd_set_4bit+0x7a>
 524:	00 c0       	rjmp	.+0      	; 0x526 <lcd_set_4bit+0x80>
 526:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 528:	42 98       	cbi	0x08, 2	; 8

	
}
 52a:	08 95       	ret

0000052c <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 52c:	98 b1       	in	r25, 0x08	; 8
 52e:	9f 70       	andi	r25, 0x0F	; 15
 530:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 532:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 534:	28 2f       	mov	r18, r24
 536:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 538:	92 2b       	or	r25, r18
 53a:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 53c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 53e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 540:	42 9a       	sbi	0x08, 2	; 8
 542:	ef ef       	ldi	r30, 0xFF	; 255
 544:	f7 e4       	ldi	r31, 0x47	; 71
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <lcd_wr_command+0x1a>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <lcd_wr_command+0x20>
 54c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 54e:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 550:	98 b1       	in	r25, 0x08	; 8
 552:	9f 70       	andi	r25, 0x0F	; 15
 554:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 556:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 558:	82 95       	swap	r24
 55a:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 55c:	89 2b       	or	r24, r25
 55e:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 560:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 562:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 564:	42 9a       	sbi	0x08, 2	; 8
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	97 e4       	ldi	r25, 0x47	; 71
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <lcd_wr_command+0x3e>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <lcd_wr_command+0x44>
 570:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 572:	42 98       	cbi	0x08, 2	; 8
}
 574:	08 95       	ret

00000576 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 576:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_set_4bit>
 57a:	86 e6       	ldi	r24, 0x66	; 102
 57c:	9e e0       	ldi	r25, 0x0E	; 14
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <lcd_init+0x8>
 582:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 584:	88 e2       	ldi	r24, 0x28	; 40
 586:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
	lcd_wr_command(0x01);
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
	lcd_wr_command(0x06);
 590:	86 e0       	ldi	r24, 0x06	; 6
 592:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
	lcd_wr_command(0x0E);
 596:	8e e0       	ldi	r24, 0x0E	; 14
 598:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
	lcd_wr_command(0x80);
 59c:	80 e8       	ldi	r24, 0x80	; 128
 59e:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
		
}
 5a2:	08 95       	ret

000005a4 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 5a4:	98 b1       	in	r25, 0x08	; 8
 5a6:	9f 70       	andi	r25, 0x0F	; 15
 5a8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 5aa:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 5ac:	28 2f       	mov	r18, r24
 5ae:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 5b0:	92 2b       	or	r25, r18
 5b2:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 5b4:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 5b6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 5b8:	42 9a       	sbi	0x08, 2	; 8
 5ba:	ef ef       	ldi	r30, 0xFF	; 255
 5bc:	f7 e4       	ldi	r31, 0x47	; 71
 5be:	31 97       	sbiw	r30, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <lcd_wr_char+0x1a>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <lcd_wr_char+0x20>
 5c4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 5c6:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 5c8:	98 b1       	in	r25, 0x08	; 8
 5ca:	9f 70       	andi	r25, 0x0F	; 15
 5cc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 5ce:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 5d0:	82 95       	swap	r24
 5d2:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 5d4:	89 2b       	or	r24, r25
 5d6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 5d8:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 5da:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 5dc:	42 9a       	sbi	0x08, 2	; 8
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	97 e4       	ldi	r25, 0x47	; 71
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <lcd_wr_char+0x3e>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <lcd_wr_char+0x44>
 5e8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 5ea:	42 98       	cbi	0x08, 2	; 8
}
 5ec:	08 95       	ret

000005ee <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 5ee:	80 e8       	ldi	r24, 0x80	; 128
 5f0:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
}
 5f4:	08 95       	ret

000005f6 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	ec 01       	movw	r28, r24
	while(*str != '\0')
 5fc:	88 81       	ld	r24, Y
 5fe:	88 23       	and	r24, r24
 600:	31 f0       	breq	.+12     	; 0x60e <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 602:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 604:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 608:	89 91       	ld	r24, Y+
 60a:	88 23       	and	r24, r24
 60c:	d9 f7       	brne	.-10     	; 0x604 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 614:	82 30       	cpi	r24, 0x02	; 2
 616:	79 f0       	breq	.+30     	; 0x636 <lcd_cursor+0x22>
 618:	83 30       	cpi	r24, 0x03	; 3
 61a:	18 f4       	brcc	.+6      	; 0x622 <lcd_cursor+0xe>
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	c9 f4       	brne	.+50     	; 0x652 <lcd_cursor+0x3e>
 620:	05 c0       	rjmp	.+10     	; 0x62c <lcd_cursor+0x18>
 622:	83 30       	cpi	r24, 0x03	; 3
 624:	69 f0       	breq	.+26     	; 0x640 <lcd_cursor+0x2c>
 626:	84 30       	cpi	r24, 0x04	; 4
 628:	a1 f4       	brne	.+40     	; 0x652 <lcd_cursor+0x3e>
 62a:	0f c0       	rjmp	.+30     	; 0x64a <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 62c:	86 2f       	mov	r24, r22
 62e:	81 58       	subi	r24, 0x81	; 129
 630:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
 634:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 636:	86 2f       	mov	r24, r22
 638:	81 54       	subi	r24, 0x41	; 65
 63a:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
 63e:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 640:	86 2f       	mov	r24, r22
 642:	8d 56       	subi	r24, 0x6D	; 109
 644:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
 648:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 64a:	86 2f       	mov	r24, r22
 64c:	8d 52       	subi	r24, 0x2D	; 45
 64e:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_wr_command>
 652:	08 95       	ret

00000654 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	8a 01       	movw	r16, r20
 65e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 660:	88 23       	and	r24, r24
 662:	11 f0       	breq	.+4      	; 0x668 <lcd_print+0x14>
 664:	66 23       	and	r22, r22
 666:	19 f4       	brne	.+6      	; 0x66e <lcd_print+0x1a>
	{
		lcd_home();
 668:	0e 94 f7 02 	call	0x5ee	; 0x5ee <lcd_home>
 66c:	02 c0       	rjmp	.+4      	; 0x672 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 66e:	0e 94 0a 03 	call	0x614	; 0x614 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 672:	c5 30       	cpi	r28, 0x05	; 5
 674:	d1 05       	cpc	r29, r1
 676:	71 f4       	brne	.+28     	; 0x694 <lcd_print+0x40>
	{
		million=value/10000+48;
 678:	c8 01       	movw	r24, r16
 67a:	60 e1       	ldi	r22, 0x10	; 16
 67c:	77 e2       	ldi	r23, 0x27	; 39
 67e:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 682:	cb 01       	movw	r24, r22
 684:	c0 96       	adiw	r24, 0x30	; 48
 686:	90 93 0d 02 	sts	0x020D, r25
 68a:	80 93 0c 02 	sts	0x020C, r24
		lcd_wr_char(million);
 68e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_wr_char>
 692:	03 c0       	rjmp	.+6      	; 0x69a <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 694:	c4 30       	cpi	r28, 0x04	; 4
 696:	d1 05       	cpc	r29, r1
 698:	b9 f4       	brne	.+46     	; 0x6c8 <lcd_print+0x74>
	{
		temp = value/1000;
 69a:	c8 01       	movw	r24, r16
 69c:	68 ee       	ldi	r22, 0xE8	; 232
 69e:	73 e0       	ldi	r23, 0x03	; 3
 6a0:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 6a4:	cb 01       	movw	r24, r22
 6a6:	70 93 10 02 	sts	0x0210, r23
 6aa:	60 93 0f 02 	sts	0x020F, r22
		thousand = temp%10 + 48;
 6ae:	6a e0       	ldi	r22, 0x0A	; 10
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 6b6:	c0 96       	adiw	r24, 0x30	; 48
 6b8:	90 93 22 02 	sts	0x0222, r25
 6bc:	80 93 21 02 	sts	0x0221, r24
		lcd_wr_char(thousand);
 6c0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_wr_char>
		flag=1;
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 6c8:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 6ca:	c3 30       	cpi	r28, 0x03	; 3
 6cc:	d1 05       	cpc	r29, r1
 6ce:	11 f0       	breq	.+4      	; 0x6d4 <lcd_print+0x80>
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	b1 f4       	brne	.+44     	; 0x700 <lcd_print+0xac>
	{
		temp = value/100;
 6d4:	c8 01       	movw	r24, r16
 6d6:	64 e6       	ldi	r22, 0x64	; 100
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 6de:	cb 01       	movw	r24, r22
 6e0:	70 93 10 02 	sts	0x0210, r23
 6e4:	60 93 0f 02 	sts	0x020F, r22
		hundred = temp%10 + 48;
 6e8:	6a e0       	ldi	r22, 0x0A	; 10
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 6f0:	c0 96       	adiw	r24, 0x30	; 48
 6f2:	90 93 1a 02 	sts	0x021A, r25
 6f6:	80 93 19 02 	sts	0x0219, r24
		lcd_wr_char(hundred);
 6fa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_wr_char>
		flag=1;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 700:	c2 30       	cpi	r28, 0x02	; 2
 702:	d1 05       	cpc	r29, r1
 704:	11 f0       	breq	.+4      	; 0x70a <lcd_print+0xb6>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	b1 f4       	brne	.+44     	; 0x736 <lcd_print+0xe2>
	{
		temp = value/10;
 70a:	2a e0       	ldi	r18, 0x0A	; 10
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	c8 01       	movw	r24, r16
 710:	b9 01       	movw	r22, r18
 712:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 716:	cb 01       	movw	r24, r22
 718:	70 93 10 02 	sts	0x0210, r23
 71c:	60 93 0f 02 	sts	0x020F, r22
		tens = temp%10 + 48;
 720:	b9 01       	movw	r22, r18
 722:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 726:	c0 96       	adiw	r24, 0x30	; 48
 728:	90 93 16 02 	sts	0x0216, r25
 72c:	80 93 15 02 	sts	0x0215, r24
		lcd_wr_char(tens);
 730:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_wr_char>
		flag=1;
 734:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 736:	c1 30       	cpi	r28, 0x01	; 1
 738:	d1 05       	cpc	r29, r1
 73a:	11 f0       	breq	.+4      	; 0x740 <lcd_print+0xec>
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	61 f4       	brne	.+24     	; 0x758 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 740:	c8 01       	movw	r24, r16
 742:	6a e0       	ldi	r22, 0x0A	; 10
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	0e 94 ac 06 	call	0xd58	; 0xd58 <__udivmodhi4>
 74a:	c0 96       	adiw	r24, 0x30	; 48
 74c:	90 93 20 02 	sts	0x0220, r25
 750:	80 93 1f 02 	sts	0x021F, r24
		lcd_wr_char(unit);
 754:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_wr_char>
	}
	if(digits>5)
 758:	c6 30       	cpi	r28, 0x06	; 6
 75a:	d1 05       	cpc	r29, r1
 75c:	1c f0       	brlt	.+6      	; 0x764 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 75e:	85 e4       	ldi	r24, 0x45	; 69
 760:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_wr_char>
	}
	
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <lcd_port_config>:
unsigned char Right_white_line = 0;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 76e:	87 b1       	in	r24, 0x07	; 7
 770:	87 6f       	ori	r24, 0xF7	; 247
 772:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 774:	88 b1       	in	r24, 0x08	; 8
 776:	80 78       	andi	r24, 0x80	; 128
 778:	88 b9       	out	0x08, r24	; 8
}
 77a:	08 95       	ret

0000077c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
 77c:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
 77e:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
 780:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
 784:	10 92 08 01 	sts	0x0108, r1
}
 788:	08 95       	ret

0000078a <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
 78a:	81 b1       	in	r24, 0x01	; 1
 78c:	8f 60       	ori	r24, 0x0F	; 15
 78e:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 790:	82 b1       	in	r24, 0x02	; 2
 792:	80 7f       	andi	r24, 0xF0	; 240
 794:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 796:	ea e0       	ldi	r30, 0x0A	; 10
 798:	f1 e0       	ldi	r31, 0x01	; 1
 79a:	80 81       	ld	r24, Z
 79c:	88 61       	ori	r24, 0x18	; 24
 79e:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 7a0:	eb e0       	ldi	r30, 0x0B	; 11
 7a2:	f1 e0       	ldi	r31, 0x01	; 1
 7a4:	80 81       	ld	r24, Z
 7a6:	88 61       	ori	r24, 0x18	; 24
 7a8:	80 83       	st	Z, r24
}
 7aa:	08 95       	ret

000007ac <port_init>:

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
 7ac:	0e 94 b7 03 	call	0x76e	; 0x76e <lcd_port_config>
	adc_pin_config();
 7b0:	0e 94 be 03 	call	0x77c	; 0x77c <adc_pin_config>
	motion_pin_config();	
 7b4:	0e 94 c5 03 	call	0x78a	; 0x78a <motion_pin_config>
}
 7b8:	08 95       	ret

000007ba <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 7ba:	e1 e2       	ldi	r30, 0x21	; 33
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
 7c2:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 7cc:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 7d0:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 7d4:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 7d8:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 7dc:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 7e0:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 7e4:	89 ea       	ldi	r24, 0xA9	; 169
 7e6:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 7ea:	8b e0       	ldi	r24, 0x0B	; 11
 7ec:	80 83       	st	Z, r24
}
 7ee:	08 95       	ret

000007f0 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
 7f0:	ea e7       	ldi	r30, 0x7A	; 122
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 7f6:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 7fa:	80 e2       	ldi	r24, 0x20	; 32
 7fc:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 800:	80 e8       	ldi	r24, 0x80	; 128
 802:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 804:	86 e8       	ldi	r24, 0x86	; 134
 806:	80 83       	st	Z, r24
}
 808:	08 95       	ret

0000080a <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
 80a:	88 30       	cpi	r24, 0x08	; 8
 80c:	18 f0       	brcs	.+6      	; 0x814 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 80e:	98 e0       	ldi	r25, 0x08	; 8
 810:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
 814:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
 816:	80 62       	ori	r24, 0x20	; 32
 818:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 81c:	ea e7       	ldi	r30, 0x7A	; 122
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	80 64       	ori	r24, 0x40	; 64
 824:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
 826:	80 81       	ld	r24, Z
 828:	84 ff       	sbrs	r24, 4
 82a:	fd cf       	rjmp	.-6      	; 0x826 <ADC_Conversion+0x1c>
	a=ADCH;
 82c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 830:	ea e7       	ldi	r30, 0x7A	; 122
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	90 81       	ld	r25, Z
 836:	90 61       	ori	r25, 0x10	; 16
 838:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 83a:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 83e:	08 95       	ret

00000840 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	d8 2f       	mov	r29, r24
 846:	c6 2f       	mov	r28, r22
 848:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
 84a:	0e 94 05 04 	call	0x80a	; 0x80a <ADC_Conversion>
 84e:	48 2f       	mov	r20, r24
 850:	80 93 13 02 	sts	0x0213, r24
	lcd_print(row, coloumn, ADC_Value, 3);
 854:	8d 2f       	mov	r24, r29
 856:	6c 2f       	mov	r22, r28
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	23 e0       	ldi	r18, 0x03	; 3
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	0e 94 2a 03 	call	0x654	; 0x654 <lcd_print>
}
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	08 95       	ret

00000868 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 868:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 86c:	60 93 2a 01 	sts	0x012A, r22
}
 870:	08 95       	ret

00000872 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
 872:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 874:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 876:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 		// reading the PORTA original status
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 878:	98 2b       	or	r25, r24
 PORTA = PortARestore; 		// executing the command
 87a:	92 b9       	out	0x02, r25	; 2
}
 87c:	08 95       	ret

0000087e <forward>:

void forward (void) 
{
  motion_set (0x06);
 87e:	86 e0       	ldi	r24, 0x06	; 6
 880:	0e 94 39 04 	call	0x872	; 0x872 <motion_set>
}
 884:	08 95       	ret

00000886 <stop>:

void stop (void)
{
  motion_set (0x00);
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	0e 94 39 04 	call	0x872	; 0x872 <motion_set>
}
 88c:	08 95       	ret

0000088e <init_devices>:

void init_devices (void)
{
 	cli(); //Clears the global interrupts
 88e:	f8 94       	cli
	port_init();
 890:	0e 94 d6 03 	call	0x7ac	; 0x7ac <port_init>
	adc_init();
 894:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <adc_init>
	timer5_init();
 898:	0e 94 dd 03 	call	0x7ba	; 0x7ba <timer5_init>
	sei();   //Enables the global interrupts
 89c:	78 94       	sei
}
 89e:	08 95       	ret

000008a0 <main>:

//Main Function
int main()
{
	init_devices();
 8a0:	0e 94 47 04 	call	0x88e	; 0x88e <init_devices>
	lcd_set_4bit();
 8a4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_set_4bit>
	lcd_init();
 8a8:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_init>
	_start_collection();/**************initialization required for state collection just before while loop***********/
 8ac:	0e 94 45 02 	call	0x48a	; 0x48a <_start_collection>
	
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 8b0:	83 e0       	ldi	r24, 0x03	; 3
 8b2:	0e 94 05 04 	call	0x80a	; 0x80a <ADC_Conversion>
 8b6:	80 93 02 02 	sts	0x0202, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 8ba:	82 e0       	ldi	r24, 0x02	; 2
 8bc:	0e 94 05 04 	call	0x80a	; 0x80a <ADC_Conversion>
 8c0:	80 93 01 02 	sts	0x0201, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	0e 94 05 04 	call	0x80a	; 0x80a <ADC_Conversion>
 8ca:	80 93 00 02 	sts	0x0200, r24

		flag=0;
 8ce:	10 92 03 02 	sts	0x0203, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	61 e0       	ldi	r22, 0x01	; 1
 8d6:	43 e0       	ldi	r20, 0x03	; 3
 8d8:	0e 94 20 04 	call	0x840	; 0x840 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	65 e0       	ldi	r22, 0x05	; 5
 8e0:	42 e0       	ldi	r20, 0x02	; 2
 8e2:	0e 94 20 04 	call	0x840	; 0x840 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	69 e0       	ldi	r22, 0x09	; 9
 8ea:	41 e0       	ldi	r20, 0x01	; 1
 8ec:	0e 94 20 04 	call	0x840	; 0x840 <print_sensor>
		
		

		if(Center_white_line<0x28)
 8f0:	80 91 01 02 	lds	r24, 0x0201
 8f4:	88 32       	cpi	r24, 0x28	; 40
 8f6:	48 f4       	brcc	.+18     	; 0x90a <main+0x6a>
		{
			flag=1;
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	80 93 03 02 	sts	0x0203, r24
			forward();
 8fe:	0e 94 3f 04 	call	0x87e	; 0x87e <forward>
			velocity(150,150);
 902:	86 e9       	ldi	r24, 0x96	; 150
 904:	66 e9       	ldi	r22, 0x96	; 150
 906:	0e 94 34 04 	call	0x868	; 0x868 <velocity>
		}

		if((Left_white_line>0x28) && (flag==0))
 90a:	80 91 02 02 	lds	r24, 0x0202
 90e:	89 32       	cpi	r24, 0x29	; 41
 910:	68 f0       	brcs	.+26     	; 0x92c <main+0x8c>
 912:	80 91 03 02 	lds	r24, 0x0203
 916:	88 23       	and	r24, r24
 918:	49 f4       	brne	.+18     	; 0x92c <main+0x8c>
		{
			flag=1;
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	80 93 03 02 	sts	0x0203, r24
			forward();
 920:	0e 94 3f 04 	call	0x87e	; 0x87e <forward>
			velocity(130,50);
 924:	82 e8       	ldi	r24, 0x82	; 130
 926:	62 e3       	ldi	r22, 0x32	; 50
 928:	0e 94 34 04 	call	0x868	; 0x868 <velocity>
		}

		if((Right_white_line>0x28) && (flag==0))
 92c:	80 91 00 02 	lds	r24, 0x0200
 930:	89 32       	cpi	r24, 0x29	; 41
 932:	68 f0       	brcs	.+26     	; 0x94e <main+0xae>
 934:	80 91 03 02 	lds	r24, 0x0203
 938:	88 23       	and	r24, r24
 93a:	49 f4       	brne	.+18     	; 0x94e <main+0xae>
		{
			flag=1;
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	80 93 03 02 	sts	0x0203, r24
			forward();
 942:	0e 94 3f 04 	call	0x87e	; 0x87e <forward>
			velocity(50,130);
 946:	82 e3       	ldi	r24, 0x32	; 50
 948:	62 e8       	ldi	r22, 0x82	; 130
 94a:	0e 94 34 04 	call	0x868	; 0x868 <velocity>
		}

		if(Center_white_line>0x28 && Left_white_line>0x28 && Right_white_line>0x28)
 94e:	80 91 01 02 	lds	r24, 0x0201
 952:	89 32       	cpi	r24, 0x29	; 41
 954:	08 f4       	brcc	.+2      	; 0x958 <main+0xb8>
 956:	ac cf       	rjmp	.-168    	; 0x8b0 <main+0x10>
 958:	80 91 02 02 	lds	r24, 0x0202
 95c:	89 32       	cpi	r24, 0x29	; 41
 95e:	08 f4       	brcc	.+2      	; 0x962 <main+0xc2>
 960:	a7 cf       	rjmp	.-178    	; 0x8b0 <main+0x10>
 962:	80 91 00 02 	lds	r24, 0x0200
 966:	89 32       	cpi	r24, 0x29	; 41
 968:	08 f4       	brcc	.+2      	; 0x96c <main+0xcc>
 96a:	a2 cf       	rjmp	.-188    	; 0x8b0 <main+0x10>
		{
			forward();
 96c:	0e 94 3f 04 	call	0x87e	; 0x87e <forward>
			velocity(0,0);
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	0e 94 34 04 	call	0x868	; 0x868 <velocity>
 978:	9b cf       	rjmp	.-202    	; 0x8b0 <main+0x10>

0000097a <__subsf3>:
 97a:	50 58       	subi	r21, 0x80	; 128

0000097c <__addsf3>:
 97c:	bb 27       	eor	r27, r27
 97e:	aa 27       	eor	r26, r26
 980:	0e d0       	rcall	.+28     	; 0x99e <__addsf3x>
 982:	4d c1       	rjmp	.+666    	; 0xc1e <__fp_round>
 984:	3e d1       	rcall	.+636    	; 0xc02 <__fp_pscA>
 986:	30 f0       	brcs	.+12     	; 0x994 <__addsf3+0x18>
 988:	43 d1       	rcall	.+646    	; 0xc10 <__fp_pscB>
 98a:	20 f0       	brcs	.+8      	; 0x994 <__addsf3+0x18>
 98c:	31 f4       	brne	.+12     	; 0x99a <__addsf3+0x1e>
 98e:	9f 3f       	cpi	r25, 0xFF	; 255
 990:	11 f4       	brne	.+4      	; 0x996 <__addsf3+0x1a>
 992:	1e f4       	brtc	.+6      	; 0x99a <__addsf3+0x1e>
 994:	33 c1       	rjmp	.+614    	; 0xbfc <__fp_nan>
 996:	0e f4       	brtc	.+2      	; 0x99a <__addsf3+0x1e>
 998:	e0 95       	com	r30
 99a:	e7 fb       	bst	r30, 7
 99c:	29 c1       	rjmp	.+594    	; 0xbf0 <__fp_inf>

0000099e <__addsf3x>:
 99e:	e9 2f       	mov	r30, r25
 9a0:	4f d1       	rcall	.+670    	; 0xc40 <__fp_split3>
 9a2:	80 f3       	brcs	.-32     	; 0x984 <__addsf3+0x8>
 9a4:	ba 17       	cp	r27, r26
 9a6:	62 07       	cpc	r22, r18
 9a8:	73 07       	cpc	r23, r19
 9aa:	84 07       	cpc	r24, r20
 9ac:	95 07       	cpc	r25, r21
 9ae:	18 f0       	brcs	.+6      	; 0x9b6 <__addsf3x+0x18>
 9b0:	71 f4       	brne	.+28     	; 0x9ce <__addsf3x+0x30>
 9b2:	9e f5       	brtc	.+102    	; 0xa1a <__addsf3x+0x7c>
 9b4:	67 c1       	rjmp	.+718    	; 0xc84 <__fp_zero>
 9b6:	0e f4       	brtc	.+2      	; 0x9ba <__addsf3x+0x1c>
 9b8:	e0 95       	com	r30
 9ba:	0b 2e       	mov	r0, r27
 9bc:	ba 2f       	mov	r27, r26
 9be:	a0 2d       	mov	r26, r0
 9c0:	0b 01       	movw	r0, r22
 9c2:	b9 01       	movw	r22, r18
 9c4:	90 01       	movw	r18, r0
 9c6:	0c 01       	movw	r0, r24
 9c8:	ca 01       	movw	r24, r20
 9ca:	a0 01       	movw	r20, r0
 9cc:	11 24       	eor	r1, r1
 9ce:	ff 27       	eor	r31, r31
 9d0:	59 1b       	sub	r21, r25
 9d2:	99 f0       	breq	.+38     	; 0x9fa <__addsf3x+0x5c>
 9d4:	59 3f       	cpi	r21, 0xF9	; 249
 9d6:	50 f4       	brcc	.+20     	; 0x9ec <__addsf3x+0x4e>
 9d8:	50 3e       	cpi	r21, 0xE0	; 224
 9da:	68 f1       	brcs	.+90     	; 0xa36 <__addsf3x+0x98>
 9dc:	1a 16       	cp	r1, r26
 9de:	f0 40       	sbci	r31, 0x00	; 0
 9e0:	a2 2f       	mov	r26, r18
 9e2:	23 2f       	mov	r18, r19
 9e4:	34 2f       	mov	r19, r20
 9e6:	44 27       	eor	r20, r20
 9e8:	58 5f       	subi	r21, 0xF8	; 248
 9ea:	f3 cf       	rjmp	.-26     	; 0x9d2 <__addsf3x+0x34>
 9ec:	46 95       	lsr	r20
 9ee:	37 95       	ror	r19
 9f0:	27 95       	ror	r18
 9f2:	a7 95       	ror	r26
 9f4:	f0 40       	sbci	r31, 0x00	; 0
 9f6:	53 95       	inc	r21
 9f8:	c9 f7       	brne	.-14     	; 0x9ec <__addsf3x+0x4e>
 9fa:	7e f4       	brtc	.+30     	; 0xa1a <__addsf3x+0x7c>
 9fc:	1f 16       	cp	r1, r31
 9fe:	ba 0b       	sbc	r27, r26
 a00:	62 0b       	sbc	r22, r18
 a02:	73 0b       	sbc	r23, r19
 a04:	84 0b       	sbc	r24, r20
 a06:	ba f0       	brmi	.+46     	; 0xa36 <__addsf3x+0x98>
 a08:	91 50       	subi	r25, 0x01	; 1
 a0a:	a1 f0       	breq	.+40     	; 0xa34 <__addsf3x+0x96>
 a0c:	ff 0f       	add	r31, r31
 a0e:	bb 1f       	adc	r27, r27
 a10:	66 1f       	adc	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	c2 f7       	brpl	.-16     	; 0xa08 <__addsf3x+0x6a>
 a18:	0e c0       	rjmp	.+28     	; 0xa36 <__addsf3x+0x98>
 a1a:	ba 0f       	add	r27, r26
 a1c:	62 1f       	adc	r22, r18
 a1e:	73 1f       	adc	r23, r19
 a20:	84 1f       	adc	r24, r20
 a22:	48 f4       	brcc	.+18     	; 0xa36 <__addsf3x+0x98>
 a24:	87 95       	ror	r24
 a26:	77 95       	ror	r23
 a28:	67 95       	ror	r22
 a2a:	b7 95       	ror	r27
 a2c:	f7 95       	ror	r31
 a2e:	9e 3f       	cpi	r25, 0xFE	; 254
 a30:	08 f0       	brcs	.+2      	; 0xa34 <__addsf3x+0x96>
 a32:	b3 cf       	rjmp	.-154    	; 0x99a <__addsf3+0x1e>
 a34:	93 95       	inc	r25
 a36:	88 0f       	add	r24, r24
 a38:	08 f0       	brcs	.+2      	; 0xa3c <__addsf3x+0x9e>
 a3a:	99 27       	eor	r25, r25
 a3c:	ee 0f       	add	r30, r30
 a3e:	97 95       	ror	r25
 a40:	87 95       	ror	r24
 a42:	08 95       	ret

00000a44 <__divsf3>:
 a44:	0c d0       	rcall	.+24     	; 0xa5e <__divsf3x>
 a46:	eb c0       	rjmp	.+470    	; 0xc1e <__fp_round>
 a48:	e3 d0       	rcall	.+454    	; 0xc10 <__fp_pscB>
 a4a:	40 f0       	brcs	.+16     	; 0xa5c <__divsf3+0x18>
 a4c:	da d0       	rcall	.+436    	; 0xc02 <__fp_pscA>
 a4e:	30 f0       	brcs	.+12     	; 0xa5c <__divsf3+0x18>
 a50:	21 f4       	brne	.+8      	; 0xa5a <__divsf3+0x16>
 a52:	5f 3f       	cpi	r21, 0xFF	; 255
 a54:	19 f0       	breq	.+6      	; 0xa5c <__divsf3+0x18>
 a56:	cc c0       	rjmp	.+408    	; 0xbf0 <__fp_inf>
 a58:	51 11       	cpse	r21, r1
 a5a:	15 c1       	rjmp	.+554    	; 0xc86 <__fp_szero>
 a5c:	cf c0       	rjmp	.+414    	; 0xbfc <__fp_nan>

00000a5e <__divsf3x>:
 a5e:	f0 d0       	rcall	.+480    	; 0xc40 <__fp_split3>
 a60:	98 f3       	brcs	.-26     	; 0xa48 <__divsf3+0x4>

00000a62 <__divsf3_pse>:
 a62:	99 23       	and	r25, r25
 a64:	c9 f3       	breq	.-14     	; 0xa58 <__divsf3+0x14>
 a66:	55 23       	and	r21, r21
 a68:	b1 f3       	breq	.-20     	; 0xa56 <__divsf3+0x12>
 a6a:	95 1b       	sub	r25, r21
 a6c:	55 0b       	sbc	r21, r21
 a6e:	bb 27       	eor	r27, r27
 a70:	aa 27       	eor	r26, r26
 a72:	62 17       	cp	r22, r18
 a74:	73 07       	cpc	r23, r19
 a76:	84 07       	cpc	r24, r20
 a78:	38 f0       	brcs	.+14     	; 0xa88 <__divsf3_pse+0x26>
 a7a:	9f 5f       	subi	r25, 0xFF	; 255
 a7c:	5f 4f       	sbci	r21, 0xFF	; 255
 a7e:	22 0f       	add	r18, r18
 a80:	33 1f       	adc	r19, r19
 a82:	44 1f       	adc	r20, r20
 a84:	aa 1f       	adc	r26, r26
 a86:	a9 f3       	breq	.-22     	; 0xa72 <__divsf3_pse+0x10>
 a88:	33 d0       	rcall	.+102    	; 0xaf0 <__divsf3_pse+0x8e>
 a8a:	0e 2e       	mov	r0, r30
 a8c:	3a f0       	brmi	.+14     	; 0xa9c <__divsf3_pse+0x3a>
 a8e:	e0 e8       	ldi	r30, 0x80	; 128
 a90:	30 d0       	rcall	.+96     	; 0xaf2 <__divsf3_pse+0x90>
 a92:	91 50       	subi	r25, 0x01	; 1
 a94:	50 40       	sbci	r21, 0x00	; 0
 a96:	e6 95       	lsr	r30
 a98:	00 1c       	adc	r0, r0
 a9a:	ca f7       	brpl	.-14     	; 0xa8e <__divsf3_pse+0x2c>
 a9c:	29 d0       	rcall	.+82     	; 0xaf0 <__divsf3_pse+0x8e>
 a9e:	fe 2f       	mov	r31, r30
 aa0:	27 d0       	rcall	.+78     	; 0xaf0 <__divsf3_pse+0x8e>
 aa2:	66 0f       	add	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	bb 1f       	adc	r27, r27
 aaa:	26 17       	cp	r18, r22
 aac:	37 07       	cpc	r19, r23
 aae:	48 07       	cpc	r20, r24
 ab0:	ab 07       	cpc	r26, r27
 ab2:	b0 e8       	ldi	r27, 0x80	; 128
 ab4:	09 f0       	breq	.+2      	; 0xab8 <__divsf3_pse+0x56>
 ab6:	bb 0b       	sbc	r27, r27
 ab8:	80 2d       	mov	r24, r0
 aba:	bf 01       	movw	r22, r30
 abc:	ff 27       	eor	r31, r31
 abe:	93 58       	subi	r25, 0x83	; 131
 ac0:	5f 4f       	sbci	r21, 0xFF	; 255
 ac2:	2a f0       	brmi	.+10     	; 0xace <__divsf3_pse+0x6c>
 ac4:	9e 3f       	cpi	r25, 0xFE	; 254
 ac6:	51 05       	cpc	r21, r1
 ac8:	68 f0       	brcs	.+26     	; 0xae4 <__divsf3_pse+0x82>
 aca:	92 c0       	rjmp	.+292    	; 0xbf0 <__fp_inf>
 acc:	dc c0       	rjmp	.+440    	; 0xc86 <__fp_szero>
 ace:	5f 3f       	cpi	r21, 0xFF	; 255
 ad0:	ec f3       	brlt	.-6      	; 0xacc <__divsf3_pse+0x6a>
 ad2:	98 3e       	cpi	r25, 0xE8	; 232
 ad4:	dc f3       	brlt	.-10     	; 0xacc <__divsf3_pse+0x6a>
 ad6:	86 95       	lsr	r24
 ad8:	77 95       	ror	r23
 ada:	67 95       	ror	r22
 adc:	b7 95       	ror	r27
 ade:	f7 95       	ror	r31
 ae0:	9f 5f       	subi	r25, 0xFF	; 255
 ae2:	c9 f7       	brne	.-14     	; 0xad6 <__divsf3_pse+0x74>
 ae4:	88 0f       	add	r24, r24
 ae6:	91 1d       	adc	r25, r1
 ae8:	96 95       	lsr	r25
 aea:	87 95       	ror	r24
 aec:	97 f9       	bld	r25, 7
 aee:	08 95       	ret
 af0:	e1 e0       	ldi	r30, 0x01	; 1
 af2:	66 0f       	add	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	bb 1f       	adc	r27, r27
 afa:	62 17       	cp	r22, r18
 afc:	73 07       	cpc	r23, r19
 afe:	84 07       	cpc	r24, r20
 b00:	ba 07       	cpc	r27, r26
 b02:	20 f0       	brcs	.+8      	; 0xb0c <__divsf3_pse+0xaa>
 b04:	62 1b       	sub	r22, r18
 b06:	73 0b       	sbc	r23, r19
 b08:	84 0b       	sbc	r24, r20
 b0a:	ba 0b       	sbc	r27, r26
 b0c:	ee 1f       	adc	r30, r30
 b0e:	88 f7       	brcc	.-30     	; 0xaf2 <__divsf3_pse+0x90>
 b10:	e0 95       	com	r30
 b12:	08 95       	ret

00000b14 <__fixsfsi>:
 b14:	04 d0       	rcall	.+8      	; 0xb1e <__fixunssfsi>
 b16:	68 94       	set
 b18:	b1 11       	cpse	r27, r1
 b1a:	b5 c0       	rjmp	.+362    	; 0xc86 <__fp_szero>
 b1c:	08 95       	ret

00000b1e <__fixunssfsi>:
 b1e:	98 d0       	rcall	.+304    	; 0xc50 <__fp_splitA>
 b20:	88 f0       	brcs	.+34     	; 0xb44 <__fixunssfsi+0x26>
 b22:	9f 57       	subi	r25, 0x7F	; 127
 b24:	90 f0       	brcs	.+36     	; 0xb4a <__fixunssfsi+0x2c>
 b26:	b9 2f       	mov	r27, r25
 b28:	99 27       	eor	r25, r25
 b2a:	b7 51       	subi	r27, 0x17	; 23
 b2c:	a0 f0       	brcs	.+40     	; 0xb56 <__fixunssfsi+0x38>
 b2e:	d1 f0       	breq	.+52     	; 0xb64 <__fixunssfsi+0x46>
 b30:	66 0f       	add	r22, r22
 b32:	77 1f       	adc	r23, r23
 b34:	88 1f       	adc	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	1a f0       	brmi	.+6      	; 0xb40 <__fixunssfsi+0x22>
 b3a:	ba 95       	dec	r27
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__fixunssfsi+0x12>
 b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__fixunssfsi+0x46>
 b40:	b1 30       	cpi	r27, 0x01	; 1
 b42:	81 f0       	breq	.+32     	; 0xb64 <__fixunssfsi+0x46>
 b44:	9f d0       	rcall	.+318    	; 0xc84 <__fp_zero>
 b46:	b1 e0       	ldi	r27, 0x01	; 1
 b48:	08 95       	ret
 b4a:	9c c0       	rjmp	.+312    	; 0xc84 <__fp_zero>
 b4c:	67 2f       	mov	r22, r23
 b4e:	78 2f       	mov	r23, r24
 b50:	88 27       	eor	r24, r24
 b52:	b8 5f       	subi	r27, 0xF8	; 248
 b54:	39 f0       	breq	.+14     	; 0xb64 <__fixunssfsi+0x46>
 b56:	b9 3f       	cpi	r27, 0xF9	; 249
 b58:	cc f3       	brlt	.-14     	; 0xb4c <__fixunssfsi+0x2e>
 b5a:	86 95       	lsr	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b3 95       	inc	r27
 b62:	d9 f7       	brne	.-10     	; 0xb5a <__fixunssfsi+0x3c>
 b64:	3e f4       	brtc	.+14     	; 0xb74 <__fixunssfsi+0x56>
 b66:	90 95       	com	r25
 b68:	80 95       	com	r24
 b6a:	70 95       	com	r23
 b6c:	61 95       	neg	r22
 b6e:	7f 4f       	sbci	r23, 0xFF	; 255
 b70:	8f 4f       	sbci	r24, 0xFF	; 255
 b72:	9f 4f       	sbci	r25, 0xFF	; 255
 b74:	08 95       	ret

00000b76 <__floatunsisf>:
 b76:	e8 94       	clt
 b78:	09 c0       	rjmp	.+18     	; 0xb8c <__floatsisf+0x12>

00000b7a <__floatsisf>:
 b7a:	97 fb       	bst	r25, 7
 b7c:	3e f4       	brtc	.+14     	; 0xb8c <__floatsisf+0x12>
 b7e:	90 95       	com	r25
 b80:	80 95       	com	r24
 b82:	70 95       	com	r23
 b84:	61 95       	neg	r22
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	99 23       	and	r25, r25
 b8e:	a9 f0       	breq	.+42     	; 0xbba <__floatsisf+0x40>
 b90:	f9 2f       	mov	r31, r25
 b92:	96 e9       	ldi	r25, 0x96	; 150
 b94:	bb 27       	eor	r27, r27
 b96:	93 95       	inc	r25
 b98:	f6 95       	lsr	r31
 b9a:	87 95       	ror	r24
 b9c:	77 95       	ror	r23
 b9e:	67 95       	ror	r22
 ba0:	b7 95       	ror	r27
 ba2:	f1 11       	cpse	r31, r1
 ba4:	f8 cf       	rjmp	.-16     	; 0xb96 <__floatsisf+0x1c>
 ba6:	fa f4       	brpl	.+62     	; 0xbe6 <__floatsisf+0x6c>
 ba8:	bb 0f       	add	r27, r27
 baa:	11 f4       	brne	.+4      	; 0xbb0 <__floatsisf+0x36>
 bac:	60 ff       	sbrs	r22, 0
 bae:	1b c0       	rjmp	.+54     	; 0xbe6 <__floatsisf+0x6c>
 bb0:	6f 5f       	subi	r22, 0xFF	; 255
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	16 c0       	rjmp	.+44     	; 0xbe6 <__floatsisf+0x6c>
 bba:	88 23       	and	r24, r24
 bbc:	11 f0       	breq	.+4      	; 0xbc2 <__floatsisf+0x48>
 bbe:	96 e9       	ldi	r25, 0x96	; 150
 bc0:	11 c0       	rjmp	.+34     	; 0xbe4 <__floatsisf+0x6a>
 bc2:	77 23       	and	r23, r23
 bc4:	21 f0       	breq	.+8      	; 0xbce <__floatsisf+0x54>
 bc6:	9e e8       	ldi	r25, 0x8E	; 142
 bc8:	87 2f       	mov	r24, r23
 bca:	76 2f       	mov	r23, r22
 bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__floatsisf+0x5e>
 bce:	66 23       	and	r22, r22
 bd0:	71 f0       	breq	.+28     	; 0xbee <__floatsisf+0x74>
 bd2:	96 e8       	ldi	r25, 0x86	; 134
 bd4:	86 2f       	mov	r24, r22
 bd6:	70 e0       	ldi	r23, 0x00	; 0
 bd8:	60 e0       	ldi	r22, 0x00	; 0
 bda:	2a f0       	brmi	.+10     	; 0xbe6 <__floatsisf+0x6c>
 bdc:	9a 95       	dec	r25
 bde:	66 0f       	add	r22, r22
 be0:	77 1f       	adc	r23, r23
 be2:	88 1f       	adc	r24, r24
 be4:	da f7       	brpl	.-10     	; 0xbdc <__floatsisf+0x62>
 be6:	88 0f       	add	r24, r24
 be8:	96 95       	lsr	r25
 bea:	87 95       	ror	r24
 bec:	97 f9       	bld	r25, 7
 bee:	08 95       	ret

00000bf0 <__fp_inf>:
 bf0:	97 f9       	bld	r25, 7
 bf2:	9f 67       	ori	r25, 0x7F	; 127
 bf4:	80 e8       	ldi	r24, 0x80	; 128
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	60 e0       	ldi	r22, 0x00	; 0
 bfa:	08 95       	ret

00000bfc <__fp_nan>:
 bfc:	9f ef       	ldi	r25, 0xFF	; 255
 bfe:	80 ec       	ldi	r24, 0xC0	; 192
 c00:	08 95       	ret

00000c02 <__fp_pscA>:
 c02:	00 24       	eor	r0, r0
 c04:	0a 94       	dec	r0
 c06:	16 16       	cp	r1, r22
 c08:	17 06       	cpc	r1, r23
 c0a:	18 06       	cpc	r1, r24
 c0c:	09 06       	cpc	r0, r25
 c0e:	08 95       	ret

00000c10 <__fp_pscB>:
 c10:	00 24       	eor	r0, r0
 c12:	0a 94       	dec	r0
 c14:	12 16       	cp	r1, r18
 c16:	13 06       	cpc	r1, r19
 c18:	14 06       	cpc	r1, r20
 c1a:	05 06       	cpc	r0, r21
 c1c:	08 95       	ret

00000c1e <__fp_round>:
 c1e:	09 2e       	mov	r0, r25
 c20:	03 94       	inc	r0
 c22:	00 0c       	add	r0, r0
 c24:	11 f4       	brne	.+4      	; 0xc2a <__fp_round+0xc>
 c26:	88 23       	and	r24, r24
 c28:	52 f0       	brmi	.+20     	; 0xc3e <__fp_round+0x20>
 c2a:	bb 0f       	add	r27, r27
 c2c:	40 f4       	brcc	.+16     	; 0xc3e <__fp_round+0x20>
 c2e:	bf 2b       	or	r27, r31
 c30:	11 f4       	brne	.+4      	; 0xc36 <__fp_round+0x18>
 c32:	60 ff       	sbrs	r22, 0
 c34:	04 c0       	rjmp	.+8      	; 0xc3e <__fp_round+0x20>
 c36:	6f 5f       	subi	r22, 0xFF	; 255
 c38:	7f 4f       	sbci	r23, 0xFF	; 255
 c3a:	8f 4f       	sbci	r24, 0xFF	; 255
 c3c:	9f 4f       	sbci	r25, 0xFF	; 255
 c3e:	08 95       	ret

00000c40 <__fp_split3>:
 c40:	57 fd       	sbrc	r21, 7
 c42:	90 58       	subi	r25, 0x80	; 128
 c44:	44 0f       	add	r20, r20
 c46:	55 1f       	adc	r21, r21
 c48:	59 f0       	breq	.+22     	; 0xc60 <__fp_splitA+0x10>
 c4a:	5f 3f       	cpi	r21, 0xFF	; 255
 c4c:	71 f0       	breq	.+28     	; 0xc6a <__fp_splitA+0x1a>
 c4e:	47 95       	ror	r20

00000c50 <__fp_splitA>:
 c50:	88 0f       	add	r24, r24
 c52:	97 fb       	bst	r25, 7
 c54:	99 1f       	adc	r25, r25
 c56:	61 f0       	breq	.+24     	; 0xc70 <__fp_splitA+0x20>
 c58:	9f 3f       	cpi	r25, 0xFF	; 255
 c5a:	79 f0       	breq	.+30     	; 0xc7a <__fp_splitA+0x2a>
 c5c:	87 95       	ror	r24
 c5e:	08 95       	ret
 c60:	12 16       	cp	r1, r18
 c62:	13 06       	cpc	r1, r19
 c64:	14 06       	cpc	r1, r20
 c66:	55 1f       	adc	r21, r21
 c68:	f2 cf       	rjmp	.-28     	; 0xc4e <__fp_split3+0xe>
 c6a:	46 95       	lsr	r20
 c6c:	f1 df       	rcall	.-30     	; 0xc50 <__fp_splitA>
 c6e:	08 c0       	rjmp	.+16     	; 0xc80 <__fp_splitA+0x30>
 c70:	16 16       	cp	r1, r22
 c72:	17 06       	cpc	r1, r23
 c74:	18 06       	cpc	r1, r24
 c76:	99 1f       	adc	r25, r25
 c78:	f1 cf       	rjmp	.-30     	; 0xc5c <__fp_splitA+0xc>
 c7a:	86 95       	lsr	r24
 c7c:	71 05       	cpc	r23, r1
 c7e:	61 05       	cpc	r22, r1
 c80:	08 94       	sec
 c82:	08 95       	ret

00000c84 <__fp_zero>:
 c84:	e8 94       	clt

00000c86 <__fp_szero>:
 c86:	bb 27       	eor	r27, r27
 c88:	66 27       	eor	r22, r22
 c8a:	77 27       	eor	r23, r23
 c8c:	cb 01       	movw	r24, r22
 c8e:	97 f9       	bld	r25, 7
 c90:	08 95       	ret

00000c92 <__mulsf3>:
 c92:	0b d0       	rcall	.+22     	; 0xcaa <__mulsf3x>
 c94:	c4 cf       	rjmp	.-120    	; 0xc1e <__fp_round>
 c96:	b5 df       	rcall	.-150    	; 0xc02 <__fp_pscA>
 c98:	28 f0       	brcs	.+10     	; 0xca4 <__mulsf3+0x12>
 c9a:	ba df       	rcall	.-140    	; 0xc10 <__fp_pscB>
 c9c:	18 f0       	brcs	.+6      	; 0xca4 <__mulsf3+0x12>
 c9e:	95 23       	and	r25, r21
 ca0:	09 f0       	breq	.+2      	; 0xca4 <__mulsf3+0x12>
 ca2:	a6 cf       	rjmp	.-180    	; 0xbf0 <__fp_inf>
 ca4:	ab cf       	rjmp	.-170    	; 0xbfc <__fp_nan>
 ca6:	11 24       	eor	r1, r1
 ca8:	ee cf       	rjmp	.-36     	; 0xc86 <__fp_szero>

00000caa <__mulsf3x>:
 caa:	ca df       	rcall	.-108    	; 0xc40 <__fp_split3>
 cac:	a0 f3       	brcs	.-24     	; 0xc96 <__mulsf3+0x4>

00000cae <__mulsf3_pse>:
 cae:	95 9f       	mul	r25, r21
 cb0:	d1 f3       	breq	.-12     	; 0xca6 <__mulsf3+0x14>
 cb2:	95 0f       	add	r25, r21
 cb4:	50 e0       	ldi	r21, 0x00	; 0
 cb6:	55 1f       	adc	r21, r21
 cb8:	62 9f       	mul	r22, r18
 cba:	f0 01       	movw	r30, r0
 cbc:	72 9f       	mul	r23, r18
 cbe:	bb 27       	eor	r27, r27
 cc0:	f0 0d       	add	r31, r0
 cc2:	b1 1d       	adc	r27, r1
 cc4:	63 9f       	mul	r22, r19
 cc6:	aa 27       	eor	r26, r26
 cc8:	f0 0d       	add	r31, r0
 cca:	b1 1d       	adc	r27, r1
 ccc:	aa 1f       	adc	r26, r26
 cce:	64 9f       	mul	r22, r20
 cd0:	66 27       	eor	r22, r22
 cd2:	b0 0d       	add	r27, r0
 cd4:	a1 1d       	adc	r26, r1
 cd6:	66 1f       	adc	r22, r22
 cd8:	82 9f       	mul	r24, r18
 cda:	22 27       	eor	r18, r18
 cdc:	b0 0d       	add	r27, r0
 cde:	a1 1d       	adc	r26, r1
 ce0:	62 1f       	adc	r22, r18
 ce2:	73 9f       	mul	r23, r19
 ce4:	b0 0d       	add	r27, r0
 ce6:	a1 1d       	adc	r26, r1
 ce8:	62 1f       	adc	r22, r18
 cea:	83 9f       	mul	r24, r19
 cec:	a0 0d       	add	r26, r0
 cee:	61 1d       	adc	r22, r1
 cf0:	22 1f       	adc	r18, r18
 cf2:	74 9f       	mul	r23, r20
 cf4:	33 27       	eor	r19, r19
 cf6:	a0 0d       	add	r26, r0
 cf8:	61 1d       	adc	r22, r1
 cfa:	23 1f       	adc	r18, r19
 cfc:	84 9f       	mul	r24, r20
 cfe:	60 0d       	add	r22, r0
 d00:	21 1d       	adc	r18, r1
 d02:	82 2f       	mov	r24, r18
 d04:	76 2f       	mov	r23, r22
 d06:	6a 2f       	mov	r22, r26
 d08:	11 24       	eor	r1, r1
 d0a:	9f 57       	subi	r25, 0x7F	; 127
 d0c:	50 40       	sbci	r21, 0x00	; 0
 d0e:	8a f0       	brmi	.+34     	; 0xd32 <__mulsf3_pse+0x84>
 d10:	e1 f0       	breq	.+56     	; 0xd4a <__mulsf3_pse+0x9c>
 d12:	88 23       	and	r24, r24
 d14:	4a f0       	brmi	.+18     	; 0xd28 <__mulsf3_pse+0x7a>
 d16:	ee 0f       	add	r30, r30
 d18:	ff 1f       	adc	r31, r31
 d1a:	bb 1f       	adc	r27, r27
 d1c:	66 1f       	adc	r22, r22
 d1e:	77 1f       	adc	r23, r23
 d20:	88 1f       	adc	r24, r24
 d22:	91 50       	subi	r25, 0x01	; 1
 d24:	50 40       	sbci	r21, 0x00	; 0
 d26:	a9 f7       	brne	.-22     	; 0xd12 <__mulsf3_pse+0x64>
 d28:	9e 3f       	cpi	r25, 0xFE	; 254
 d2a:	51 05       	cpc	r21, r1
 d2c:	70 f0       	brcs	.+28     	; 0xd4a <__mulsf3_pse+0x9c>
 d2e:	60 cf       	rjmp	.-320    	; 0xbf0 <__fp_inf>
 d30:	aa cf       	rjmp	.-172    	; 0xc86 <__fp_szero>
 d32:	5f 3f       	cpi	r21, 0xFF	; 255
 d34:	ec f3       	brlt	.-6      	; 0xd30 <__mulsf3_pse+0x82>
 d36:	98 3e       	cpi	r25, 0xE8	; 232
 d38:	dc f3       	brlt	.-10     	; 0xd30 <__mulsf3_pse+0x82>
 d3a:	86 95       	lsr	r24
 d3c:	77 95       	ror	r23
 d3e:	67 95       	ror	r22
 d40:	b7 95       	ror	r27
 d42:	f7 95       	ror	r31
 d44:	e7 95       	ror	r30
 d46:	9f 5f       	subi	r25, 0xFF	; 255
 d48:	c1 f7       	brne	.-16     	; 0xd3a <__mulsf3_pse+0x8c>
 d4a:	fe 2b       	or	r31, r30
 d4c:	88 0f       	add	r24, r24
 d4e:	91 1d       	adc	r25, r1
 d50:	96 95       	lsr	r25
 d52:	87 95       	ror	r24
 d54:	97 f9       	bld	r25, 7
 d56:	08 95       	ret

00000d58 <__udivmodhi4>:
 d58:	aa 1b       	sub	r26, r26
 d5a:	bb 1b       	sub	r27, r27
 d5c:	51 e1       	ldi	r21, 0x11	; 17
 d5e:	07 c0       	rjmp	.+14     	; 0xd6e <__udivmodhi4_ep>

00000d60 <__udivmodhi4_loop>:
 d60:	aa 1f       	adc	r26, r26
 d62:	bb 1f       	adc	r27, r27
 d64:	a6 17       	cp	r26, r22
 d66:	b7 07       	cpc	r27, r23
 d68:	10 f0       	brcs	.+4      	; 0xd6e <__udivmodhi4_ep>
 d6a:	a6 1b       	sub	r26, r22
 d6c:	b7 0b       	sbc	r27, r23

00000d6e <__udivmodhi4_ep>:
 d6e:	88 1f       	adc	r24, r24
 d70:	99 1f       	adc	r25, r25
 d72:	5a 95       	dec	r21
 d74:	a9 f7       	brne	.-22     	; 0xd60 <__udivmodhi4_loop>
 d76:	80 95       	com	r24
 d78:	90 95       	com	r25
 d7a:	bc 01       	movw	r22, r24
 d7c:	cd 01       	movw	r24, r26
 d7e:	08 95       	ret

00000d80 <__divmodhi4>:
 d80:	97 fb       	bst	r25, 7
 d82:	09 2e       	mov	r0, r25
 d84:	07 26       	eor	r0, r23
 d86:	0a d0       	rcall	.+20     	; 0xd9c <__divmodhi4_neg1>
 d88:	77 fd       	sbrc	r23, 7
 d8a:	04 d0       	rcall	.+8      	; 0xd94 <__divmodhi4_neg2>
 d8c:	e5 df       	rcall	.-54     	; 0xd58 <__udivmodhi4>
 d8e:	06 d0       	rcall	.+12     	; 0xd9c <__divmodhi4_neg1>
 d90:	00 20       	and	r0, r0
 d92:	1a f4       	brpl	.+6      	; 0xd9a <__divmodhi4_exit>

00000d94 <__divmodhi4_neg2>:
 d94:	70 95       	com	r23
 d96:	61 95       	neg	r22
 d98:	7f 4f       	sbci	r23, 0xFF	; 255

00000d9a <__divmodhi4_exit>:
 d9a:	08 95       	ret

00000d9c <__divmodhi4_neg1>:
 d9c:	f6 f7       	brtc	.-4      	; 0xd9a <__divmodhi4_exit>
 d9e:	90 95       	com	r25
 da0:	81 95       	neg	r24
 da2:	9f 4f       	sbci	r25, 0xFF	; 255
 da4:	08 95       	ret

00000da6 <_exit>:
 da6:	f8 94       	cli

00000da8 <__stop_program>:
 da8:	ff cf       	rjmp	.-2      	; 0xda8 <__stop_program>
