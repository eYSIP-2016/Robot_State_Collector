
State_collection_white_line_sensing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e7a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000023  00800200  00800200  00000eee  2**0
                  ALLOC
  2 .stab         00002184  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006a8  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00003720  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010da  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000327  00000000  00000000  000048ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070e  00000000  00000000  00004be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000034c  00000000  00000000  000052f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  0000563c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000678  00000000  00000000  00005a69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_5>
  18:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_6>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_45>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 32       	cpi	r26, 0x23	; 35
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 b8 04 	call	0x970	; 0x970 <main>
 122:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_adc_pinconfig>:
* Example Call:		_adc_pinconfig()
*
*/
void _adc_pinconfig (void)
{
	DDRF = DDRF & 0x01;  //set PORTF direction as input
 12a:	80 b3       	in	r24, 0x10	; 16
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	80 bb       	out	0x10, r24	; 16
	PORTF = 0x00; //set PORTF pins floating
 130:	11 ba       	out	0x11, r1	; 17
	DDRK = DDRK & 0xC0;  //set PORTK direction as input
 132:	e7 e0       	ldi	r30, 0x07	; 7
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	80 81       	ld	r24, Z
 138:	80 7c       	andi	r24, 0xC0	; 192
 13a:	80 83       	st	Z, r24
	PORTK = 0x00; //set PORTK pins floating
 13c:	10 92 08 01 	sts	0x0108, r1
}
 140:	08 95       	ret

00000142 <_adc_init>:
* Example Call:		_adc_init()
*
*/
void _adc_init(void)
{
	ADCSRA = 0x00;
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 148:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1(result is left adjusted) --- MUX4:0 = 0000
 14c:	80 e2       	ldi	r24, 0x20	; 32
 14e:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;        //Analog comparator disable to reduce power consumption
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1(ADC enable)  --- ADPS2:0 = 1 1 0
 156:	86 e8       	ldi	r24, 0x86	; 134
 158:	80 83       	st	Z, r24
}
 15a:	08 95       	ret

0000015c <_conv_adc>:
*
*/
unsigned char _conv_adc(unsigned char ch)
{
	unsigned char a;     // digital value which stores the digital value of ADCH register
	if(ch>7)
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	18 f0       	brcs	.+6      	; 0x166 <_conv_adc+0xa>
	{
		ADCSRB = 0x08;
 160:	98 e0       	ldi	r25, 0x08	; 8
 162:	90 93 7b 00 	sts	0x007B, r25
	}
	ch = ch & 0x07;			  //Store only 3 LSB bits
 166:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20 | ch;		 //Select the ADC channel with left adjust select
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;	 //Set start conversion bit
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
 178:	80 81       	ld	r24, Z
 17a:	84 ff       	sbrs	r24, 4
 17c:	fd cf       	rjmp	.-6      	; 0x178 <_conv_adc+0x1c>
	a=ADCH;
 17e:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10;   //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	90 81       	ld	r25, Z
 188:	90 61       	ori	r25, 0x10	; 16
 18a:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 18c:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 190:	08 95       	ret

00000192 <converttomm_41sk>:
* Output:           Distance in mm
* Example Call:		converttomm_41sk(_conv_adc(9));
*
*/
unsigned int converttomm_41sk(unsigned int a)//conversion of sharp sensor values.
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
	double b;
	b=a;
 196:	bc 01       	movw	r22, r24
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
	b = b*0.001240875;
 1a0:	46 2f       	mov	r20, r22
 1a2:	57 2f       	mov	r21, r23
 1a4:	68 2f       	mov	r22, r24
 1a6:	79 2f       	mov	r23, r25
 1a8:	cb 01       	movw	r24, r22
 1aa:	ba 01       	movw	r22, r20
 1ac:	2b ed       	ldi	r18, 0xDB	; 219
 1ae:	34 ea       	ldi	r19, 0xA4	; 164
 1b0:	42 ea       	ldi	r20, 0xA2	; 162
 1b2:	5a e3       	ldi	r21, 0x3A	; 58
 1b4:	0e 94 b1 06 	call	0xd62	; 0xd62 <__mulsf3>
	b = b+0.005;
 1b8:	46 2f       	mov	r20, r22
 1ba:	57 2f       	mov	r21, r23
 1bc:	68 2f       	mov	r22, r24
 1be:	79 2f       	mov	r23, r25
 1c0:	cb 01       	movw	r24, r22
 1c2:	ba 01       	movw	r22, r20
 1c4:	2a e0       	ldi	r18, 0x0A	; 10
 1c6:	37 ed       	ldi	r19, 0xD7	; 215
 1c8:	43 ea       	ldi	r20, 0xA3	; 163
 1ca:	5b e3       	ldi	r21, 0x3B	; 59
 1cc:	0e 94 26 05 	call	0xa4c	; 0xa4c <__addsf3>
 1d0:	b6 2f       	mov	r27, r22
 1d2:	a7 2f       	mov	r26, r23
 1d4:	38 2f       	mov	r19, r24
 1d6:	29 2f       	mov	r18, r25
	b = 10/b;
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	91 e4       	ldi	r25, 0x41	; 65
 1e0:	42 2f       	mov	r20, r18
 1e2:	0b 2f       	mov	r16, r27
 1e4:	1a 2f       	mov	r17, r26
 1e6:	23 2f       	mov	r18, r19
 1e8:	34 2f       	mov	r19, r20
 1ea:	a9 01       	movw	r20, r18
 1ec:	98 01       	movw	r18, r16
 1ee:	0e 94 8a 05 	call	0xb14	; 0xb14 <__divsf3>
	b = b-24.2;
 1f2:	46 2f       	mov	r20, r22
 1f4:	57 2f       	mov	r21, r23
 1f6:	68 2f       	mov	r22, r24
 1f8:	79 2f       	mov	r23, r25
 1fa:	cb 01       	movw	r24, r22
 1fc:	ba 01       	movw	r22, r20
 1fe:	2a e9       	ldi	r18, 0x9A	; 154
 200:	39 e9       	ldi	r19, 0x99	; 153
 202:	41 ec       	ldi	r20, 0xC1	; 193
 204:	51 e4       	ldi	r21, 0x41	; 65
 206:	0e 94 25 05 	call	0xa4a	; 0xa4a <__subsf3>
	b = (int)b;
 20a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fixsfsi>
 20e:	88 27       	eor	r24, r24
 210:	77 fd       	sbrc	r23, 7
 212:	80 95       	com	r24
 214:	98 2f       	mov	r25, r24
 216:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatsisf>
	return b;
 21a:	0e 94 f7 05 	call	0xbee	; 0xbee <__fixunssfsi>
}
 21e:	86 2f       	mov	r24, r22
 220:	97 2f       	mov	r25, r23
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <_timer4_init>:
* Example Call:		NONE
*
*/
void _timer4_init(void)
{
	TCCR4B = 0x00; //stop
 228:	e1 ea       	ldi	r30, 0xA1	; 161
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	10 82       	st	Z, r1
	OCR4AH = 0x00; //Output Compare Register (OCR)- Not used
 22e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
 232:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
 236:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
 23a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
 23e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
 242:	10 92 ac 00 	sts	0x00AC, r1
	ICR4   = 0x7080; //Input Capture Register (ICR)  
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	90 e7       	ldi	r25, 0x70	; 112
 24a:	90 93 a7 00 	sts	0x00A7, r25
 24e:	80 93 a6 00 	sts	0x00A6, r24
	TCCR4C = 0x00;
 252:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4A = 0b00000010;// Normal port operation........WGM41:40=1 0
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	80 93 a0 00 	sts	0x00A0, r24
	TCCR4B = 0b00011100; //start Timer.......WGM43:42=1 1........CS42:40=1 0 0(clkI/O/256 (From prescaler)) 
 25c:	8c e1       	ldi	r24, 0x1C	; 28
 25e:	80 83       	st	Z, r24
}
 260:	08 95       	ret

00000262 <send>:

void send ( int n)
{
	int z = 0;
	int c = n;
	a[0] = 0;
 262:	10 92 1c 02 	sts	0x021C, r1
	a[1] = 0;
 266:	10 92 1d 02 	sts	0x021D, r1
	a[2] = 0;
 26a:	10 92 1e 02 	sts	0x021E, r1
	while (c)
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	61 f0       	breq	.+24     	; 0x28a <send+0x28>
 272:	ec e1       	ldi	r30, 0x1C	; 28
 274:	f2 e0       	ldi	r31, 0x02	; 2
	{ // loop till there's nothing left
		a[z++] = (char)(c % 10); // assign the last digit
 276:	2a e0       	ldi	r18, 0x0A	; 10
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	0e 94 28 07 	call	0xe50	; 0xe50 <__divmodhi4>
 280:	81 93       	st	Z+, r24
		c /= 10; // "right shift" the number
 282:	86 2f       	mov	r24, r22
 284:	97 2f       	mov	r25, r23
	int z = 0;
	int c = n;
	a[0] = 0;
	a[1] = 0;
	a[2] = 0;
	while (c)
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	c1 f7       	brne	.-16     	; 0x27a <send+0x18>
	{ // loop till there's nothing left
		a[z++] = (char)(c % 10); // assign the last digit
		c /= 10; // "right shift" the number
	}
	
	UDR0 = a[2] + 48;   //sending the first digit
 28a:	80 91 1e 02 	lds	r24, 0x021E
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))   
 294:	e0 ec       	ldi	r30, 0xC0	; 192
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	85 ff       	sbrs	r24, 5
 29c:	fd cf       	rjmp	.-6      	; 0x298 <send+0x36>
	{
		//waiting for transmission to complete
	}
	UDR0 = a[1] + 48; //sending the second digit
 29e:	80 91 1d 02 	lds	r24, 0x021D
 2a2:	80 5d       	subi	r24, 0xD0	; 208
 2a4:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 2a8:	e0 ec       	ldi	r30, 0xC0	; 192
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	85 ff       	sbrs	r24, 5
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <send+0x4a>
	{
		//waiting for transmission to complete
	}
	UDR0 = a[0] + 48; //sending the third digit
 2b2:	80 91 1c 02 	lds	r24, 0x021C
 2b6:	80 5d       	subi	r24, 0xD0	; 208
 2b8:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 2bc:	e0 ec       	ldi	r30, 0xC0	; 192
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	85 ff       	sbrs	r24, 5
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <send+0x5e>
	{
		//waiting for transmission to complete
	}
	UDR0 = 32;      //to give space between two integer
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 2cc:	e0 ec       	ldi	r30, 0xC0	; 192
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	85 ff       	sbrs	r24, 5
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <send+0x6e>
	{
		//waiting for transmission to complete
	}
}
 2d6:	08 95       	ret

000002d8 <getdigital>:
*
*/

void getdigital(void)
{
	 lwl= _conv_adc(3);  	//Getting data of Left WL Sensor
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 2de:	80 93 0b 02 	sts	0x020B, r24
	 cwl = _conv_adc(2);	//Getting data of Center WL Sensor
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 2e8:	80 93 0a 02 	sts	0x020A, r24
	 rwl = _conv_adc(1);	//Getting data of Right WL Sensor
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 2f2:	80 93 09 02 	sts	0x0209, r24
	 sp1 = _conv_adc(9);     //Getting data of sharp sensor1.
 2f6:	89 e0       	ldi	r24, 0x09	; 9
 2f8:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 2fc:	80 93 13 02 	sts	0x0213, r24
	 sp2 = _conv_adc(10);    //Getting data of sharp sensor2.
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 306:	80 93 14 02 	sts	0x0214, r24
	 sp3 = _conv_adc(11);    //Getting data of sharp sensor3.
 30a:	8b e0       	ldi	r24, 0x0B	; 11
 30c:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 310:	80 93 19 02 	sts	0x0219, r24
	 IR1 = _conv_adc(4);     //Getting value of IR proximity sensor1.
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 31a:	80 93 16 02 	sts	0x0216, r24
	 IR2 = _conv_adc(5);     //Getting value of IR proximity sensor2.
 31e:	85 e0       	ldi	r24, 0x05	; 5
 320:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 324:	80 93 0e 02 	sts	0x020E, r24
	 IR3 = _conv_adc(6);     //Getting value of IR proximity sensor3.
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	0e 94 ae 00 	call	0x15c	; 0x15c <_conv_adc>
 32e:	80 93 08 02 	sts	0x0208, r24
	 
	
}
 332:	08 95       	ret

00000334 <_uart0_init>:
* Example Call:		               NONE
*/

void _uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 334:	e1 ec       	ldi	r30, 0xC1	; 193
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 33a:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;//asynchronous usart..........character size:8-bit
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	80 93 c2 00 	sts	0x00C2, r24
	//baud rate setting;9600
	UBRR0L = 0x5F; //set baud rate lo
 344:	8f e5       	ldi	r24, 0x5F	; 95
 346:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
 34a:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
 34e:	88 e9       	ldi	r24, 0x98	; 152
 350:	80 83       	st	Z, r24
}
 352:	08 95       	ret

00000354 <_left_encoder_pin_config>:
*/


void _left_encoder_pin_config (void)
{   
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
 354:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
 356:	74 9a       	sbi	0x0e, 4	; 14
}
 358:	08 95       	ret

0000035a <_right_encoder_pin_config>:
* Example Call:		               _right_encoder_pin_config ();
*/

void _right_encoder_pin_config (void)
{  
	 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 5 pin as input
 35a:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 5 pin
 35c:	75 9a       	sbi	0x0e, 5	; 14
}
 35e:	08 95       	ret

00000360 <_port_init>:
* Example Call:		               _port_init();
*/
void _port_init()
{

	_adc_pinconfig();
 360:	0e 94 95 00 	call	0x12a	; 0x12a <_adc_pinconfig>
	_left_encoder_pin_config () ;
 364:	0e 94 aa 01 	call	0x354	; 0x354 <_left_encoder_pin_config>
    _right_encoder_pin_config (); 
 368:	0e 94 ad 01 	call	0x35a	; 0x35a <_right_encoder_pin_config>
}
 36c:	08 95       	ret

0000036e <_left_position_encoder_interrupt_init>:
	* Example Call:		 _left_position_encoder_interrupt_init ();
	*/
	
void _left_position_encoder_interrupt_init (void)
	{
		cli(); //Clears the global interrupt
 36e:	f8 94       	cli
		EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
 370:	ea e6       	ldi	r30, 0x6A	; 106
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	82 60       	ori	r24, 0x02	; 2
 378:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
 37a:	ec 9a       	sbi	0x1d, 4	; 29
		sei();   // Enables the global interrupt
 37c:	78 94       	sei
	}
 37e:	08 95       	ret

00000380 <_right_position_encoder_interrupt_init>:
	* Example Call:		 _right_position_encoder_interrupt_init ();
	*/

	void _right_position_encoder_interrupt_init (void)
	{
		cli(); //Clears the global interrupt
 380:	f8 94       	cli
		EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
 382:	ea e6       	ldi	r30, 0x6A	; 106
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 38c:	ed 9a       	sbi	0x1d, 5	; 29
		sei();   // Enables the global interrupt
 38e:	78 94       	sei
	}
 390:	08 95       	ret

00000392 <__vector_6>:
	* Logic :                             Increments variable 'rightpulse' on receiving pulse from right position encoder
	* Example Call:		                  NONE
	*/
	
	ISR(INT5_vect)
	{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
		rightpulse++;  //increment right pulse  count
 3a0:	80 91 04 02 	lds	r24, 0x0204
 3a4:	90 91 05 02 	lds	r25, 0x0205
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	90 93 05 02 	sts	0x0205, r25
 3ae:	80 93 04 02 	sts	0x0204, r24
	}
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_5>:
	* Example Call:		                  NONE
	*/

	
	ISR(INT4_vect)
	{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
		leftpulse++;  //increment left pulse count
 3ce:	80 91 06 02 	lds	r24, 0x0206
 3d2:	90 91 07 02 	lds	r25, 0x0207
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	90 93 07 02 	sts	0x0207, r25
 3dc:	80 93 06 02 	sts	0x0206, r24
	}
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <velocity_leftwheel_cmpersec>:
	*/

int  velocity_leftwheel_cmpersec()
{
	int vel;
	vel= (leftpulse*5.44)/(10*0.5);    //0.5 sec is the time after which reading is taken.
 3ee:	60 91 06 02 	lds	r22, 0x0206
 3f2:	70 91 07 02 	lds	r23, 0x0207
 3f6:	88 27       	eor	r24, r24
 3f8:	77 fd       	sbrc	r23, 7
 3fa:	80 95       	com	r24
 3fc:	98 2f       	mov	r25, r24
 3fe:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatsisf>
 402:	2b e7       	ldi	r18, 0x7B	; 123
 404:	34 e1       	ldi	r19, 0x14	; 20
 406:	4e ea       	ldi	r20, 0xAE	; 174
 408:	50 e4       	ldi	r21, 0x40	; 64
 40a:	0e 94 b1 06 	call	0xd62	; 0xd62 <__mulsf3>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 ea       	ldi	r20, 0xA0	; 160
 414:	50 e4       	ldi	r21, 0x40	; 64
 416:	0e 94 8a 05 	call	0xb14	; 0xb14 <__divsf3>
 41a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fixsfsi>
	leftpulse=0;
 41e:	10 92 07 02 	sts	0x0207, r1
 422:	10 92 06 02 	sts	0x0206, r1
	return vel;
}
 426:	86 2f       	mov	r24, r22
 428:	97 2f       	mov	r25, r23
 42a:	08 95       	ret

0000042c <velocity_rightwheel_cmpersec>:
	*/

int velocity_rightwheel_cmpersec()
{
	int vel;
	vel= (rightpulse*5.44)/(10*0.5);  //0.5 sec is the time after which reading is taken.
 42c:	60 91 04 02 	lds	r22, 0x0204
 430:	70 91 05 02 	lds	r23, 0x0205
 434:	88 27       	eor	r24, r24
 436:	77 fd       	sbrc	r23, 7
 438:	80 95       	com	r24
 43a:	98 2f       	mov	r25, r24
 43c:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatsisf>
 440:	2b e7       	ldi	r18, 0x7B	; 123
 442:	34 e1       	ldi	r19, 0x14	; 20
 444:	4e ea       	ldi	r20, 0xAE	; 174
 446:	50 e4       	ldi	r21, 0x40	; 64
 448:	0e 94 b1 06 	call	0xd62	; 0xd62 <__mulsf3>
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	40 ea       	ldi	r20, 0xA0	; 160
 452:	50 e4       	ldi	r21, 0x40	; 64
 454:	0e 94 8a 05 	call	0xb14	; 0xb14 <__divsf3>
 458:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fixsfsi>
	rightpulse=0;
 45c:	10 92 05 02 	sts	0x0205, r1
 460:	10 92 04 02 	sts	0x0204, r1
	return vel;
}
 464:	86 2f       	mov	r24, r22
 466:	97 2f       	mov	r25, r23
 468:	08 95       	ret

0000046a <__vector_45>:
* Logic:			               Timer 4 is configured as such that it gets overflow in  every 0.5 seconds so 
                                   that the sensor readings & wheel velocity are updated and sent continuously.
* Example Call:		               NONE
*/
ISR(TIMER4_OVF_vect)
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	0b b6       	in	r0, 0x3b	; 59
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
	     cli();                 //Clears the global interrupt
 490:	f8 94       	cli
		getdigital();           //stores digital value of sensors in different variables.
 492:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <getdigital>
		//sensor_data_interpretation();
		send(count);
 496:	80 91 0c 02 	lds	r24, 0x020C
 49a:	90 91 0d 02 	lds	r25, 0x020D
 49e:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(lwl);                  //send the value of left white line sensor
 4a2:	80 91 0b 02 	lds	r24, 0x020B
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(cwl);                  //send the value of center white line sensor
 4ac:	80 91 0a 02 	lds	r24, 0x020A
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(rwl);                  //send the value of right white line sensor
 4b6:	80 91 09 02 	lds	r24, 0x0209
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(converttomm_41sk(sp1));//send the value of sharp sensor 1
 4c0:	80 91 13 02 	lds	r24, 0x0213
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 c9 00 	call	0x192	; 0x192 <converttomm_41sk>
 4ca:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(converttomm_41sk(sp2));//send the value of sharp sensor 2
 4ce:	80 91 14 02 	lds	r24, 0x0214
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 c9 00 	call	0x192	; 0x192 <converttomm_41sk>
 4d8:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(converttomm_41sk(sp3));//send the value of sharp sensor 3 
 4dc:	80 91 19 02 	lds	r24, 0x0219
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 c9 00 	call	0x192	; 0x192 <converttomm_41sk>
 4e6:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(IR1);                  //send the value of proximity sensor1
 4ea:	80 91 16 02 	lds	r24, 0x0216
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(IR2);                  //send the value of proximity sensor2
 4f4:	80 91 0e 02 	lds	r24, 0x020E
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 31 01 	call	0x262	; 0x262 <send>
        send(IR3);                  //send the value of proximity sensor3
 4fe:	80 91 08 02 	lds	r24, 0x0208
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 31 01 	call	0x262	; 0x262 <send>

		send(velocity_leftwheel_cmpersec());  //send the value of left wheel velocity in cm.
 508:	0e 94 f7 01 	call	0x3ee	; 0x3ee <velocity_leftwheel_cmpersec>
 50c:	0e 94 31 01 	call	0x262	; 0x262 <send>
		send(velocity_rightwheel_cmpersec()); //send the value of right wheel velocity in cm.
 510:	0e 94 16 02 	call	0x42c	; 0x42c <velocity_rightwheel_cmpersec>
 514:	0e 94 31 01 	call	0x262	; 0x262 <send>
		count++;                      //increase the value of count
 518:	80 91 0c 02 	lds	r24, 0x020C
 51c:	90 91 0d 02 	lds	r25, 0x020D
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	90 93 0d 02 	sts	0x020D, r25
 526:	80 93 0c 02 	sts	0x020C, r24
		sei();                        //enables the global interrupt      
 52a:	78 94       	sei
}
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	bf 91       	pop	r27
 532:	af 91       	pop	r26
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	7f 91       	pop	r23
 53a:	6f 91       	pop	r22
 53c:	5f 91       	pop	r21
 53e:	4f 91       	pop	r20
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	0f 90       	pop	r0
 546:	0b be       	out	0x3b, r0	; 59
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <_init_devices>:
	* Logic :            NONE
	* Example Call:		 velocity_leftwheel_cmpersec();
	*/
void _init_devices()
{
	cli();         //Clears the global interrupt
 552:	f8 94       	cli
	_port_init();  //Initializes all the ports
 554:	0e 94 b0 01 	call	0x360	; 0x360 <_port_init>
	_timer4_init();
 558:	0e 94 14 01 	call	0x228	; 0x228 <_timer4_init>
	_adc_init();
 55c:	0e 94 a1 00 	call	0x142	; 0x142 <_adc_init>
	_uart0_init(); //Initialize UART0 for wireless serial communication
 560:	0e 94 9a 01 	call	0x334	; 0x334 <_uart0_init>
	TIMSK4 = 0x01; //Timer/Counter 4 Overflow interrupt is enabled
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 72 00 	sts	0x0072, r24
	_left_position_encoder_interrupt_init ();
 56a:	0e 94 b7 01 	call	0x36e	; 0x36e <_left_position_encoder_interrupt_init>
	_right_position_encoder_interrupt_init ();
 56e:	0e 94 c0 01 	call	0x380	; 0x380 <_right_position_encoder_interrupt_init>
	sei();         // Enables the global interrupt
 572:	78 94       	sei
}
 574:	08 95       	ret

00000576 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 576:	86 e6       	ldi	r24, 0x66	; 102
 578:	9e e0       	ldi	r25, 0x0E	; 14
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <lcd_set_4bit+0x4>
 57e:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 580:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 582:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 584:	80 e3       	ldi	r24, 0x30	; 48
 586:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 588:	42 9a       	sbi	0x08, 2	; 8
 58a:	ef ef       	ldi	r30, 0xFF	; 255
 58c:	f7 e4       	ldi	r31, 0x47	; 71
 58e:	31 97       	sbiw	r30, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <lcd_set_4bit+0x18>
 592:	00 c0       	rjmp	.+0      	; 0x594 <lcd_set_4bit+0x1e>
 594:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 596:	42 98       	cbi	0x08, 2	; 8
 598:	e6 e6       	ldi	r30, 0x66	; 102
 59a:	fe e0       	ldi	r31, 0x0E	; 14
 59c:	31 97       	sbiw	r30, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <lcd_set_4bit+0x26>
 5a0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5a2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 5a4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 5a6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 5a8:	42 9a       	sbi	0x08, 2	; 8
 5aa:	ef ef       	ldi	r30, 0xFF	; 255
 5ac:	f7 e4       	ldi	r31, 0x47	; 71
 5ae:	31 97       	sbiw	r30, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <lcd_set_4bit+0x38>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <lcd_set_4bit+0x3e>
 5b4:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 5b6:	42 98       	cbi	0x08, 2	; 8
 5b8:	e6 e6       	ldi	r30, 0x66	; 102
 5ba:	fe e0       	ldi	r31, 0x0E	; 14
 5bc:	31 97       	sbiw	r30, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <lcd_set_4bit+0x46>
 5c0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5c2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 5c4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 5c6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 5c8:	42 9a       	sbi	0x08, 2	; 8
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	97 e4       	ldi	r25, 0x47	; 71
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <lcd_set_4bit+0x58>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <lcd_set_4bit+0x5e>
 5d4:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 5d6:	42 98       	cbi	0x08, 2	; 8
 5d8:	e6 e6       	ldi	r30, 0x66	; 102
 5da:	fe e0       	ldi	r31, 0x0E	; 14
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <lcd_set_4bit+0x66>
 5e0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 5e2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 5e4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 5e6:	80 e2       	ldi	r24, 0x20	; 32
 5e8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 5ea:	42 9a       	sbi	0x08, 2	; 8
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	97 e4       	ldi	r25, 0x47	; 71
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <lcd_set_4bit+0x7a>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <lcd_set_4bit+0x80>
 5f6:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 5f8:	42 98       	cbi	0x08, 2	; 8

	
}
 5fa:	08 95       	ret

000005fc <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 5fc:	98 b1       	in	r25, 0x08	; 8
 5fe:	9f 70       	andi	r25, 0x0F	; 15
 600:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 602:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 604:	28 2f       	mov	r18, r24
 606:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 608:	92 2b       	or	r25, r18
 60a:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 60c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 60e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 610:	42 9a       	sbi	0x08, 2	; 8
 612:	ef ef       	ldi	r30, 0xFF	; 255
 614:	f7 e4       	ldi	r31, 0x47	; 71
 616:	31 97       	sbiw	r30, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <lcd_wr_command+0x1a>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <lcd_wr_command+0x20>
 61c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 61e:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 620:	98 b1       	in	r25, 0x08	; 8
 622:	9f 70       	andi	r25, 0x0F	; 15
 624:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 626:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 628:	82 95       	swap	r24
 62a:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 62c:	89 2b       	or	r24, r25
 62e:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 630:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 632:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 634:	42 9a       	sbi	0x08, 2	; 8
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	97 e4       	ldi	r25, 0x47	; 71
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <lcd_wr_command+0x3e>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <lcd_wr_command+0x44>
 640:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 642:	42 98       	cbi	0x08, 2	; 8
}
 644:	08 95       	ret

00000646 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 646:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_4bit>
 64a:	86 e6       	ldi	r24, 0x66	; 102
 64c:	9e e0       	ldi	r25, 0x0E	; 14
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <lcd_init+0x8>
 652:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 654:	88 e2       	ldi	r24, 0x28	; 40
 656:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
	lcd_wr_command(0x01);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
	lcd_wr_command(0x06);
 660:	86 e0       	ldi	r24, 0x06	; 6
 662:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
	lcd_wr_command(0x0E);
 666:	8e e0       	ldi	r24, 0x0E	; 14
 668:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
	lcd_wr_command(0x80);
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
		
}
 672:	08 95       	ret

00000674 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 674:	98 b1       	in	r25, 0x08	; 8
 676:	9f 70       	andi	r25, 0x0F	; 15
 678:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 67a:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 67c:	28 2f       	mov	r18, r24
 67e:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 680:	92 2b       	or	r25, r18
 682:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 684:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 686:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 688:	42 9a       	sbi	0x08, 2	; 8
 68a:	ef ef       	ldi	r30, 0xFF	; 255
 68c:	f7 e4       	ldi	r31, 0x47	; 71
 68e:	31 97       	sbiw	r30, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <lcd_wr_char+0x1a>
 692:	00 c0       	rjmp	.+0      	; 0x694 <lcd_wr_char+0x20>
 694:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 696:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 698:	98 b1       	in	r25, 0x08	; 8
 69a:	9f 70       	andi	r25, 0x0F	; 15
 69c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 69e:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 6a0:	82 95       	swap	r24
 6a2:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 6a4:	89 2b       	or	r24, r25
 6a6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 6a8:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 6aa:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 6ac:	42 9a       	sbi	0x08, 2	; 8
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	97 e4       	ldi	r25, 0x47	; 71
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <lcd_wr_char+0x3e>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <lcd_wr_char+0x44>
 6b8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 6ba:	42 98       	cbi	0x08, 2	; 8
}
 6bc:	08 95       	ret

000006be <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 6be:	80 e8       	ldi	r24, 0x80	; 128
 6c0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
}
 6c4:	08 95       	ret

000006c6 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	ec 01       	movw	r28, r24
	while(*str != '\0')
 6cc:	88 81       	ld	r24, Y
 6ce:	88 23       	and	r24, r24
 6d0:	31 f0       	breq	.+12     	; 0x6de <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 6d2:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 6d4:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 6d8:	89 91       	ld	r24, Y+
 6da:	88 23       	and	r24, r24
 6dc:	d9 f7       	brne	.-10     	; 0x6d4 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 6e4:	82 30       	cpi	r24, 0x02	; 2
 6e6:	79 f0       	breq	.+30     	; 0x706 <lcd_cursor+0x22>
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	18 f4       	brcc	.+6      	; 0x6f2 <lcd_cursor+0xe>
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	c9 f4       	brne	.+50     	; 0x722 <lcd_cursor+0x3e>
 6f0:	05 c0       	rjmp	.+10     	; 0x6fc <lcd_cursor+0x18>
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	69 f0       	breq	.+26     	; 0x710 <lcd_cursor+0x2c>
 6f6:	84 30       	cpi	r24, 0x04	; 4
 6f8:	a1 f4       	brne	.+40     	; 0x722 <lcd_cursor+0x3e>
 6fa:	0f c0       	rjmp	.+30     	; 0x71a <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 6fc:	86 2f       	mov	r24, r22
 6fe:	81 58       	subi	r24, 0x81	; 129
 700:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
 704:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 706:	86 2f       	mov	r24, r22
 708:	81 54       	subi	r24, 0x41	; 65
 70a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
 70e:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 710:	86 2f       	mov	r24, r22
 712:	8d 56       	subi	r24, 0x6D	; 109
 714:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
 718:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 71a:	86 2f       	mov	r24, r22
 71c:	8d 52       	subi	r24, 0x2D	; 45
 71e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_wr_command>
 722:	08 95       	ret

00000724 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	8a 01       	movw	r16, r20
 72e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 730:	88 23       	and	r24, r24
 732:	11 f0       	breq	.+4      	; 0x738 <lcd_print+0x14>
 734:	66 23       	and	r22, r22
 736:	19 f4       	brne	.+6      	; 0x73e <lcd_print+0x1a>
	{
		lcd_home();
 738:	0e 94 5f 03 	call	0x6be	; 0x6be <lcd_home>
 73c:	02 c0       	rjmp	.+4      	; 0x742 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 73e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 742:	c5 30       	cpi	r28, 0x05	; 5
 744:	d1 05       	cpc	r29, r1
 746:	71 f4       	brne	.+28     	; 0x764 <lcd_print+0x40>
	{
		million=value/10000+48;
 748:	c8 01       	movw	r24, r16
 74a:	60 e1       	ldi	r22, 0x10	; 16
 74c:	77 e2       	ldi	r23, 0x27	; 39
 74e:	0e 94 14 07 	call	0xe28	; 0xe28 <__udivmodhi4>
 752:	cb 01       	movw	r24, r22
 754:	c0 96       	adiw	r24, 0x30	; 48
 756:	90 93 10 02 	sts	0x0210, r25
 75a:	80 93 0f 02 	sts	0x020F, r24
		lcd_wr_char(million);
 75e:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_wr_char>
 762:	03 c0       	rjmp	.+6      	; 0x76a <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 764:	c4 30       	cpi	r28, 0x04	; 4
 766:	d1 05       	cpc	r29, r1
 768:	b9 f4       	brne	.+46     	; 0x798 <lcd_print+0x74>
	{
		temp = value/1000;
 76a:	c8 01       	movw	r24, r16
 76c:	68 ee       	ldi	r22, 0xE8	; 232
 76e:	73 e0       	ldi	r23, 0x03	; 3
 770:	0e 94 14 07 	call	0xe28	; 0xe28 <__udivmodhi4>
 774:	cb 01       	movw	r24, r22
 776:	70 93 12 02 	sts	0x0212, r23
 77a:	60 93 11 02 	sts	0x0211, r22
		thousand = temp%10 + 48;
 77e:	6a e0       	ldi	r22, 0x0A	; 10
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	0e 94 14 07 	call	0xe28	; 0xe28 <__udivmodhi4>
 786:	c0 96       	adiw	r24, 0x30	; 48
 788:	90 93 22 02 	sts	0x0222, r25
 78c:	80 93 21 02 	sts	0x0221, r24
		lcd_wr_char(thousand);
 790:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_wr_char>
		flag=1;
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	01 c0       	rjmp	.+2      	; 0x79a <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 798:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 79a:	c3 30       	cpi	r28, 0x03	; 3
 79c:	d1 05       	cpc	r29, r1
 79e:	11 f0       	breq	.+4      	; 0x7a4 <lcd_print+0x80>
 7a0:	81 30       	cpi	r24, 0x01	; 1
 7a2:	b1 f4       	brne	.+44     	; 0x7d0 <lcd_print+0xac>
	{
		temp = value/100;
 7a4:	c8 01       	movw	r24, r16
 7a6:	64 e6       	ldi	r22, 0x64	; 100
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	0e 94 14 07 	call	0xe28	; 0xe28 <__udivmodhi4>
 7ae:	cb 01       	movw	r24, r22
 7b0:	70 93 12 02 	sts	0x0212, r23
 7b4:	60 93 11 02 	sts	0x0211, r22
		hundred = temp%10 + 48;
 7b8:	6a e0       	ldi	r22, 0x0A	; 10
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	0e 94 14 07 	call	0xe28	; 0xe28 <__udivmodhi4>
 7c0:	c0 96       	adiw	r24, 0x30	; 48
 7c2:	90 93 1b 02 	sts	0x021B, r25
 7c6:	80 93 1a 02 	sts	0x021A, r24
		lcd_wr_char(hundred);
 7ca:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_wr_char>
		flag=1;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 7d0:	c2 30       	cpi	r28, 0x02	; 2
 7d2:	d1 05       	cpc	r29, r1
 7d4:	11 f0       	breq	.+4      	; 0x7da <lcd_print+0xb6>
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	b1 f4       	brne	.+44     	; 0x806 <lcd_print+0xe2>
	{
		temp = value/10;
 7da:	2a e0       	ldi	r18, 0x0A	; 10
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	c8 01       	movw	r24, r16
 7e0:	b9 01       	movw	r22, r18
 7e2:	0e 94 14 07 	call	0xe28	; 0xe28 <__udivmodhi4>
 7e6:	cb 01       	movw	r24, r22
 7e8:	70 93 12 02 	sts	0x0212, r23
 7ec:	60 93 11 02 	sts	0x0211, r22
		tens = temp%10 + 48;
 7f0:	b9 01       	movw	r22, r18
 7f2:	0e 94 14 07 	call	0xe28	; 0xe28 <__udivmodhi4>
 7f6:	c0 96       	adiw	r24, 0x30	; 48
 7f8:	90 93 18 02 	sts	0x0218, r25
 7fc:	80 93 17 02 	sts	0x0217, r24
		lcd_wr_char(tens);
 800:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_wr_char>
		flag=1;
 804:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 806:	c1 30       	cpi	r28, 0x01	; 1
 808:	d1 05       	cpc	r29, r1
 80a:	11 f0       	breq	.+4      	; 0x810 <lcd_print+0xec>
 80c:	81 30       	cpi	r24, 0x01	; 1
 80e:	61 f4       	brne	.+24     	; 0x828 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 810:	c8 01       	movw	r24, r16
 812:	6a e0       	ldi	r22, 0x0A	; 10
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	0e 94 14 07 	call	0xe28	; 0xe28 <__udivmodhi4>
 81a:	c0 96       	adiw	r24, 0x30	; 48
 81c:	90 93 20 02 	sts	0x0220, r25
 820:	80 93 1f 02 	sts	0x021F, r24
		lcd_wr_char(unit);
 824:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_wr_char>
	}
	if(digits>5)
 828:	c6 30       	cpi	r28, 0x06	; 6
 82a:	d1 05       	cpc	r29, r1
 82c:	1c f0       	brlt	.+6      	; 0x834 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 82e:	85 e4       	ldi	r24, 0x45	; 69
 830:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_wr_char>
	}
	
}
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	08 95       	ret

0000083e <lcd_port_config>:
unsigned char Right_white_line = 0;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 83e:	87 b1       	in	r24, 0x07	; 7
 840:	87 6f       	ori	r24, 0xF7	; 247
 842:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 844:	88 b1       	in	r24, 0x08	; 8
 846:	80 78       	andi	r24, 0x80	; 128
 848:	88 b9       	out	0x08, r24	; 8
}
 84a:	08 95       	ret

0000084c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
 84c:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
 84e:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
 850:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
 854:	10 92 08 01 	sts	0x0108, r1
}
 858:	08 95       	ret

0000085a <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
 85a:	81 b1       	in	r24, 0x01	; 1
 85c:	8f 60       	ori	r24, 0x0F	; 15
 85e:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 860:	82 b1       	in	r24, 0x02	; 2
 862:	80 7f       	andi	r24, 0xF0	; 240
 864:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 866:	ea e0       	ldi	r30, 0x0A	; 10
 868:	f1 e0       	ldi	r31, 0x01	; 1
 86a:	80 81       	ld	r24, Z
 86c:	88 61       	ori	r24, 0x18	; 24
 86e:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 870:	eb e0       	ldi	r30, 0x0B	; 11
 872:	f1 e0       	ldi	r31, 0x01	; 1
 874:	80 81       	ld	r24, Z
 876:	88 61       	ori	r24, 0x18	; 24
 878:	80 83       	st	Z, r24
}
 87a:	08 95       	ret

0000087c <port_init>:

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
 87c:	0e 94 1f 04 	call	0x83e	; 0x83e <lcd_port_config>
	adc_pin_config();
 880:	0e 94 26 04 	call	0x84c	; 0x84c <adc_pin_config>
	motion_pin_config();	
 884:	0e 94 2d 04 	call	0x85a	; 0x85a <motion_pin_config>
}
 888:	08 95       	ret

0000088a <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 88a:	e1 e2       	ldi	r30, 0x21	; 33
 88c:	f1 e0       	ldi	r31, 0x01	; 1
 88e:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 890:	8f ef       	ldi	r24, 0xFF	; 255
 892:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 89c:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 8a0:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 8a4:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 8a8:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 8ac:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 8b0:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 8b4:	89 ea       	ldi	r24, 0xA9	; 169
 8b6:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 8ba:	8b e0       	ldi	r24, 0x0B	; 11
 8bc:	80 83       	st	Z, r24
}
 8be:	08 95       	ret

000008c0 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
 8c0:	ea e7       	ldi	r30, 0x7A	; 122
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 8c6:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 8d0:	80 e8       	ldi	r24, 0x80	; 128
 8d2:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 8d4:	86 e8       	ldi	r24, 0x86	; 134
 8d6:	80 83       	st	Z, r24
}
 8d8:	08 95       	ret

000008da <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
 8da:	88 30       	cpi	r24, 0x08	; 8
 8dc:	18 f0       	brcs	.+6      	; 0x8e4 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 8de:	98 e0       	ldi	r25, 0x08	; 8
 8e0:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
 8e4:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
 8e6:	80 62       	ori	r24, 0x20	; 32
 8e8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 8ec:	ea e7       	ldi	r30, 0x7A	; 122
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	80 81       	ld	r24, Z
 8f2:	80 64       	ori	r24, 0x40	; 64
 8f4:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
 8f6:	80 81       	ld	r24, Z
 8f8:	84 ff       	sbrs	r24, 4
 8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <ADC_Conversion+0x1c>
	a=ADCH;
 8fc:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 900:	ea e7       	ldi	r30, 0x7A	; 122
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	90 81       	ld	r25, Z
 906:	90 61       	ori	r25, 0x10	; 16
 908:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 90a:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 90e:	08 95       	ret

00000910 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	d8 2f       	mov	r29, r24
 916:	c6 2f       	mov	r28, r22
 918:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
 91a:	0e 94 6d 04 	call	0x8da	; 0x8da <ADC_Conversion>
 91e:	48 2f       	mov	r20, r24
 920:	80 93 15 02 	sts	0x0215, r24
	lcd_print(row, coloumn, ADC_Value, 3);
 924:	8d 2f       	mov	r24, r29
 926:	6c 2f       	mov	r22, r28
 928:	50 e0       	ldi	r21, 0x00	; 0
 92a:	23 e0       	ldi	r18, 0x03	; 3
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	0e 94 92 03 	call	0x724	; 0x724 <lcd_print>
}
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 938:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 93c:	60 93 2a 01 	sts	0x012A, r22
}
 940:	08 95       	ret

00000942 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
 942:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 944:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 946:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 		// reading the PORTA original status
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 948:	98 2b       	or	r25, r24
 PORTA = PortARestore; 		// executing the command
 94a:	92 b9       	out	0x02, r25	; 2
}
 94c:	08 95       	ret

0000094e <forward>:

void forward (void) 
{
  motion_set (0x06);
 94e:	86 e0       	ldi	r24, 0x06	; 6
 950:	0e 94 a1 04 	call	0x942	; 0x942 <motion_set>
}
 954:	08 95       	ret

00000956 <stop>:

void stop (void)
{
  motion_set (0x00);
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	0e 94 a1 04 	call	0x942	; 0x942 <motion_set>
}
 95c:	08 95       	ret

0000095e <init_devices>:

void init_devices (void)
{
 	cli(); //Clears the global interrupts
 95e:	f8 94       	cli
	port_init();
 960:	0e 94 3e 04 	call	0x87c	; 0x87c <port_init>
	adc_init();
 964:	0e 94 60 04 	call	0x8c0	; 0x8c0 <adc_init>
	timer5_init();
 968:	0e 94 45 04 	call	0x88a	; 0x88a <timer5_init>
	sei();   //Enables the global interrupts
 96c:	78 94       	sei
}
 96e:	08 95       	ret

00000970 <main>:

//Main Function
int main()
{
	init_devices();
 970:	0e 94 af 04 	call	0x95e	; 0x95e <init_devices>
	lcd_set_4bit();
 974:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_4bit>
	lcd_init();
 978:	0e 94 23 03 	call	0x646	; 0x646 <lcd_init>
	_init_devices();/**************initialization required for state collection just before while loop***********/
 97c:	0e 94 a9 02 	call	0x552	; 0x552 <_init_devices>
	
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 980:	83 e0       	ldi	r24, 0x03	; 3
 982:	0e 94 6d 04 	call	0x8da	; 0x8da <ADC_Conversion>
 986:	80 93 02 02 	sts	0x0202, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 98a:	82 e0       	ldi	r24, 0x02	; 2
 98c:	0e 94 6d 04 	call	0x8da	; 0x8da <ADC_Conversion>
 990:	80 93 01 02 	sts	0x0201, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	0e 94 6d 04 	call	0x8da	; 0x8da <ADC_Conversion>
 99a:	80 93 00 02 	sts	0x0200, r24

		flag=0;
 99e:	10 92 03 02 	sts	0x0203, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	61 e0       	ldi	r22, 0x01	; 1
 9a6:	43 e0       	ldi	r20, 0x03	; 3
 9a8:	0e 94 88 04 	call	0x910	; 0x910 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	65 e0       	ldi	r22, 0x05	; 5
 9b0:	42 e0       	ldi	r20, 0x02	; 2
 9b2:	0e 94 88 04 	call	0x910	; 0x910 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	69 e0       	ldi	r22, 0x09	; 9
 9ba:	41 e0       	ldi	r20, 0x01	; 1
 9bc:	0e 94 88 04 	call	0x910	; 0x910 <print_sensor>
		
		

		if(Center_white_line<0x28)
 9c0:	80 91 01 02 	lds	r24, 0x0201
 9c4:	88 32       	cpi	r24, 0x28	; 40
 9c6:	48 f4       	brcc	.+18     	; 0x9da <main+0x6a>
		{
			flag=1;
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	80 93 03 02 	sts	0x0203, r24
			forward();
 9ce:	0e 94 a7 04 	call	0x94e	; 0x94e <forward>
			velocity(150,150);
 9d2:	86 e9       	ldi	r24, 0x96	; 150
 9d4:	66 e9       	ldi	r22, 0x96	; 150
 9d6:	0e 94 9c 04 	call	0x938	; 0x938 <velocity>
		}

		if((Left_white_line>0x28) && (flag==0))
 9da:	80 91 02 02 	lds	r24, 0x0202
 9de:	89 32       	cpi	r24, 0x29	; 41
 9e0:	68 f0       	brcs	.+26     	; 0x9fc <main+0x8c>
 9e2:	80 91 03 02 	lds	r24, 0x0203
 9e6:	88 23       	and	r24, r24
 9e8:	49 f4       	brne	.+18     	; 0x9fc <main+0x8c>
		{
			flag=1;
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	80 93 03 02 	sts	0x0203, r24
			forward();
 9f0:	0e 94 a7 04 	call	0x94e	; 0x94e <forward>
			velocity(130,50);
 9f4:	82 e8       	ldi	r24, 0x82	; 130
 9f6:	62 e3       	ldi	r22, 0x32	; 50
 9f8:	0e 94 9c 04 	call	0x938	; 0x938 <velocity>
		}

		if((Right_white_line>0x28) && (flag==0))
 9fc:	80 91 00 02 	lds	r24, 0x0200
 a00:	89 32       	cpi	r24, 0x29	; 41
 a02:	68 f0       	brcs	.+26     	; 0xa1e <main+0xae>
 a04:	80 91 03 02 	lds	r24, 0x0203
 a08:	88 23       	and	r24, r24
 a0a:	49 f4       	brne	.+18     	; 0xa1e <main+0xae>
		{
			flag=1;
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	80 93 03 02 	sts	0x0203, r24
			forward();
 a12:	0e 94 a7 04 	call	0x94e	; 0x94e <forward>
			velocity(50,130);
 a16:	82 e3       	ldi	r24, 0x32	; 50
 a18:	62 e8       	ldi	r22, 0x82	; 130
 a1a:	0e 94 9c 04 	call	0x938	; 0x938 <velocity>
		}

		if(Center_white_line>0x28 && Left_white_line>0x28 && Right_white_line>0x28)
 a1e:	80 91 01 02 	lds	r24, 0x0201
 a22:	89 32       	cpi	r24, 0x29	; 41
 a24:	08 f4       	brcc	.+2      	; 0xa28 <main+0xb8>
 a26:	ac cf       	rjmp	.-168    	; 0x980 <main+0x10>
 a28:	80 91 02 02 	lds	r24, 0x0202
 a2c:	89 32       	cpi	r24, 0x29	; 41
 a2e:	08 f4       	brcc	.+2      	; 0xa32 <main+0xc2>
 a30:	a7 cf       	rjmp	.-178    	; 0x980 <main+0x10>
 a32:	80 91 00 02 	lds	r24, 0x0200
 a36:	89 32       	cpi	r24, 0x29	; 41
 a38:	08 f4       	brcc	.+2      	; 0xa3c <main+0xcc>
 a3a:	a2 cf       	rjmp	.-188    	; 0x980 <main+0x10>
		{
			forward();
 a3c:	0e 94 a7 04 	call	0x94e	; 0x94e <forward>
			velocity(0,0);
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	60 e0       	ldi	r22, 0x00	; 0
 a44:	0e 94 9c 04 	call	0x938	; 0x938 <velocity>
 a48:	9b cf       	rjmp	.-202    	; 0x980 <main+0x10>

00000a4a <__subsf3>:
 a4a:	50 58       	subi	r21, 0x80	; 128

00000a4c <__addsf3>:
 a4c:	bb 27       	eor	r27, r27
 a4e:	aa 27       	eor	r26, r26
 a50:	0e d0       	rcall	.+28     	; 0xa6e <__addsf3x>
 a52:	4d c1       	rjmp	.+666    	; 0xcee <__fp_round>
 a54:	3e d1       	rcall	.+636    	; 0xcd2 <__fp_pscA>
 a56:	30 f0       	brcs	.+12     	; 0xa64 <__addsf3+0x18>
 a58:	43 d1       	rcall	.+646    	; 0xce0 <__fp_pscB>
 a5a:	20 f0       	brcs	.+8      	; 0xa64 <__addsf3+0x18>
 a5c:	31 f4       	brne	.+12     	; 0xa6a <__addsf3+0x1e>
 a5e:	9f 3f       	cpi	r25, 0xFF	; 255
 a60:	11 f4       	brne	.+4      	; 0xa66 <__addsf3+0x1a>
 a62:	1e f4       	brtc	.+6      	; 0xa6a <__addsf3+0x1e>
 a64:	33 c1       	rjmp	.+614    	; 0xccc <__fp_nan>
 a66:	0e f4       	brtc	.+2      	; 0xa6a <__addsf3+0x1e>
 a68:	e0 95       	com	r30
 a6a:	e7 fb       	bst	r30, 7
 a6c:	29 c1       	rjmp	.+594    	; 0xcc0 <__fp_inf>

00000a6e <__addsf3x>:
 a6e:	e9 2f       	mov	r30, r25
 a70:	4f d1       	rcall	.+670    	; 0xd10 <__fp_split3>
 a72:	80 f3       	brcs	.-32     	; 0xa54 <__addsf3+0x8>
 a74:	ba 17       	cp	r27, r26
 a76:	62 07       	cpc	r22, r18
 a78:	73 07       	cpc	r23, r19
 a7a:	84 07       	cpc	r24, r20
 a7c:	95 07       	cpc	r25, r21
 a7e:	18 f0       	brcs	.+6      	; 0xa86 <__addsf3x+0x18>
 a80:	71 f4       	brne	.+28     	; 0xa9e <__addsf3x+0x30>
 a82:	9e f5       	brtc	.+102    	; 0xaea <__addsf3x+0x7c>
 a84:	67 c1       	rjmp	.+718    	; 0xd54 <__fp_zero>
 a86:	0e f4       	brtc	.+2      	; 0xa8a <__addsf3x+0x1c>
 a88:	e0 95       	com	r30
 a8a:	0b 2e       	mov	r0, r27
 a8c:	ba 2f       	mov	r27, r26
 a8e:	a0 2d       	mov	r26, r0
 a90:	0b 01       	movw	r0, r22
 a92:	b9 01       	movw	r22, r18
 a94:	90 01       	movw	r18, r0
 a96:	0c 01       	movw	r0, r24
 a98:	ca 01       	movw	r24, r20
 a9a:	a0 01       	movw	r20, r0
 a9c:	11 24       	eor	r1, r1
 a9e:	ff 27       	eor	r31, r31
 aa0:	59 1b       	sub	r21, r25
 aa2:	99 f0       	breq	.+38     	; 0xaca <__addsf3x+0x5c>
 aa4:	59 3f       	cpi	r21, 0xF9	; 249
 aa6:	50 f4       	brcc	.+20     	; 0xabc <__addsf3x+0x4e>
 aa8:	50 3e       	cpi	r21, 0xE0	; 224
 aaa:	68 f1       	brcs	.+90     	; 0xb06 <__addsf3x+0x98>
 aac:	1a 16       	cp	r1, r26
 aae:	f0 40       	sbci	r31, 0x00	; 0
 ab0:	a2 2f       	mov	r26, r18
 ab2:	23 2f       	mov	r18, r19
 ab4:	34 2f       	mov	r19, r20
 ab6:	44 27       	eor	r20, r20
 ab8:	58 5f       	subi	r21, 0xF8	; 248
 aba:	f3 cf       	rjmp	.-26     	; 0xaa2 <__addsf3x+0x34>
 abc:	46 95       	lsr	r20
 abe:	37 95       	ror	r19
 ac0:	27 95       	ror	r18
 ac2:	a7 95       	ror	r26
 ac4:	f0 40       	sbci	r31, 0x00	; 0
 ac6:	53 95       	inc	r21
 ac8:	c9 f7       	brne	.-14     	; 0xabc <__addsf3x+0x4e>
 aca:	7e f4       	brtc	.+30     	; 0xaea <__addsf3x+0x7c>
 acc:	1f 16       	cp	r1, r31
 ace:	ba 0b       	sbc	r27, r26
 ad0:	62 0b       	sbc	r22, r18
 ad2:	73 0b       	sbc	r23, r19
 ad4:	84 0b       	sbc	r24, r20
 ad6:	ba f0       	brmi	.+46     	; 0xb06 <__addsf3x+0x98>
 ad8:	91 50       	subi	r25, 0x01	; 1
 ada:	a1 f0       	breq	.+40     	; 0xb04 <__addsf3x+0x96>
 adc:	ff 0f       	add	r31, r31
 ade:	bb 1f       	adc	r27, r27
 ae0:	66 1f       	adc	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	c2 f7       	brpl	.-16     	; 0xad8 <__addsf3x+0x6a>
 ae8:	0e c0       	rjmp	.+28     	; 0xb06 <__addsf3x+0x98>
 aea:	ba 0f       	add	r27, r26
 aec:	62 1f       	adc	r22, r18
 aee:	73 1f       	adc	r23, r19
 af0:	84 1f       	adc	r24, r20
 af2:	48 f4       	brcc	.+18     	; 0xb06 <__addsf3x+0x98>
 af4:	87 95       	ror	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	b7 95       	ror	r27
 afc:	f7 95       	ror	r31
 afe:	9e 3f       	cpi	r25, 0xFE	; 254
 b00:	08 f0       	brcs	.+2      	; 0xb04 <__addsf3x+0x96>
 b02:	b3 cf       	rjmp	.-154    	; 0xa6a <__addsf3+0x1e>
 b04:	93 95       	inc	r25
 b06:	88 0f       	add	r24, r24
 b08:	08 f0       	brcs	.+2      	; 0xb0c <__addsf3x+0x9e>
 b0a:	99 27       	eor	r25, r25
 b0c:	ee 0f       	add	r30, r30
 b0e:	97 95       	ror	r25
 b10:	87 95       	ror	r24
 b12:	08 95       	ret

00000b14 <__divsf3>:
 b14:	0c d0       	rcall	.+24     	; 0xb2e <__divsf3x>
 b16:	eb c0       	rjmp	.+470    	; 0xcee <__fp_round>
 b18:	e3 d0       	rcall	.+454    	; 0xce0 <__fp_pscB>
 b1a:	40 f0       	brcs	.+16     	; 0xb2c <__divsf3+0x18>
 b1c:	da d0       	rcall	.+436    	; 0xcd2 <__fp_pscA>
 b1e:	30 f0       	brcs	.+12     	; 0xb2c <__divsf3+0x18>
 b20:	21 f4       	brne	.+8      	; 0xb2a <__divsf3+0x16>
 b22:	5f 3f       	cpi	r21, 0xFF	; 255
 b24:	19 f0       	breq	.+6      	; 0xb2c <__divsf3+0x18>
 b26:	cc c0       	rjmp	.+408    	; 0xcc0 <__fp_inf>
 b28:	51 11       	cpse	r21, r1
 b2a:	15 c1       	rjmp	.+554    	; 0xd56 <__fp_szero>
 b2c:	cf c0       	rjmp	.+414    	; 0xccc <__fp_nan>

00000b2e <__divsf3x>:
 b2e:	f0 d0       	rcall	.+480    	; 0xd10 <__fp_split3>
 b30:	98 f3       	brcs	.-26     	; 0xb18 <__divsf3+0x4>

00000b32 <__divsf3_pse>:
 b32:	99 23       	and	r25, r25
 b34:	c9 f3       	breq	.-14     	; 0xb28 <__divsf3+0x14>
 b36:	55 23       	and	r21, r21
 b38:	b1 f3       	breq	.-20     	; 0xb26 <__divsf3+0x12>
 b3a:	95 1b       	sub	r25, r21
 b3c:	55 0b       	sbc	r21, r21
 b3e:	bb 27       	eor	r27, r27
 b40:	aa 27       	eor	r26, r26
 b42:	62 17       	cp	r22, r18
 b44:	73 07       	cpc	r23, r19
 b46:	84 07       	cpc	r24, r20
 b48:	38 f0       	brcs	.+14     	; 0xb58 <__divsf3_pse+0x26>
 b4a:	9f 5f       	subi	r25, 0xFF	; 255
 b4c:	5f 4f       	sbci	r21, 0xFF	; 255
 b4e:	22 0f       	add	r18, r18
 b50:	33 1f       	adc	r19, r19
 b52:	44 1f       	adc	r20, r20
 b54:	aa 1f       	adc	r26, r26
 b56:	a9 f3       	breq	.-22     	; 0xb42 <__divsf3_pse+0x10>
 b58:	33 d0       	rcall	.+102    	; 0xbc0 <__divsf3_pse+0x8e>
 b5a:	0e 2e       	mov	r0, r30
 b5c:	3a f0       	brmi	.+14     	; 0xb6c <__divsf3_pse+0x3a>
 b5e:	e0 e8       	ldi	r30, 0x80	; 128
 b60:	30 d0       	rcall	.+96     	; 0xbc2 <__divsf3_pse+0x90>
 b62:	91 50       	subi	r25, 0x01	; 1
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	e6 95       	lsr	r30
 b68:	00 1c       	adc	r0, r0
 b6a:	ca f7       	brpl	.-14     	; 0xb5e <__divsf3_pse+0x2c>
 b6c:	29 d0       	rcall	.+82     	; 0xbc0 <__divsf3_pse+0x8e>
 b6e:	fe 2f       	mov	r31, r30
 b70:	27 d0       	rcall	.+78     	; 0xbc0 <__divsf3_pse+0x8e>
 b72:	66 0f       	add	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	bb 1f       	adc	r27, r27
 b7a:	26 17       	cp	r18, r22
 b7c:	37 07       	cpc	r19, r23
 b7e:	48 07       	cpc	r20, r24
 b80:	ab 07       	cpc	r26, r27
 b82:	b0 e8       	ldi	r27, 0x80	; 128
 b84:	09 f0       	breq	.+2      	; 0xb88 <__divsf3_pse+0x56>
 b86:	bb 0b       	sbc	r27, r27
 b88:	80 2d       	mov	r24, r0
 b8a:	bf 01       	movw	r22, r30
 b8c:	ff 27       	eor	r31, r31
 b8e:	93 58       	subi	r25, 0x83	; 131
 b90:	5f 4f       	sbci	r21, 0xFF	; 255
 b92:	2a f0       	brmi	.+10     	; 0xb9e <__divsf3_pse+0x6c>
 b94:	9e 3f       	cpi	r25, 0xFE	; 254
 b96:	51 05       	cpc	r21, r1
 b98:	68 f0       	brcs	.+26     	; 0xbb4 <__divsf3_pse+0x82>
 b9a:	92 c0       	rjmp	.+292    	; 0xcc0 <__fp_inf>
 b9c:	dc c0       	rjmp	.+440    	; 0xd56 <__fp_szero>
 b9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ba0:	ec f3       	brlt	.-6      	; 0xb9c <__divsf3_pse+0x6a>
 ba2:	98 3e       	cpi	r25, 0xE8	; 232
 ba4:	dc f3       	brlt	.-10     	; 0xb9c <__divsf3_pse+0x6a>
 ba6:	86 95       	lsr	r24
 ba8:	77 95       	ror	r23
 baa:	67 95       	ror	r22
 bac:	b7 95       	ror	r27
 bae:	f7 95       	ror	r31
 bb0:	9f 5f       	subi	r25, 0xFF	; 255
 bb2:	c9 f7       	brne	.-14     	; 0xba6 <__divsf3_pse+0x74>
 bb4:	88 0f       	add	r24, r24
 bb6:	91 1d       	adc	r25, r1
 bb8:	96 95       	lsr	r25
 bba:	87 95       	ror	r24
 bbc:	97 f9       	bld	r25, 7
 bbe:	08 95       	ret
 bc0:	e1 e0       	ldi	r30, 0x01	; 1
 bc2:	66 0f       	add	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	bb 1f       	adc	r27, r27
 bca:	62 17       	cp	r22, r18
 bcc:	73 07       	cpc	r23, r19
 bce:	84 07       	cpc	r24, r20
 bd0:	ba 07       	cpc	r27, r26
 bd2:	20 f0       	brcs	.+8      	; 0xbdc <__divsf3_pse+0xaa>
 bd4:	62 1b       	sub	r22, r18
 bd6:	73 0b       	sbc	r23, r19
 bd8:	84 0b       	sbc	r24, r20
 bda:	ba 0b       	sbc	r27, r26
 bdc:	ee 1f       	adc	r30, r30
 bde:	88 f7       	brcc	.-30     	; 0xbc2 <__divsf3_pse+0x90>
 be0:	e0 95       	com	r30
 be2:	08 95       	ret

00000be4 <__fixsfsi>:
 be4:	04 d0       	rcall	.+8      	; 0xbee <__fixunssfsi>
 be6:	68 94       	set
 be8:	b1 11       	cpse	r27, r1
 bea:	b5 c0       	rjmp	.+362    	; 0xd56 <__fp_szero>
 bec:	08 95       	ret

00000bee <__fixunssfsi>:
 bee:	98 d0       	rcall	.+304    	; 0xd20 <__fp_splitA>
 bf0:	88 f0       	brcs	.+34     	; 0xc14 <__fixunssfsi+0x26>
 bf2:	9f 57       	subi	r25, 0x7F	; 127
 bf4:	90 f0       	brcs	.+36     	; 0xc1a <__fixunssfsi+0x2c>
 bf6:	b9 2f       	mov	r27, r25
 bf8:	99 27       	eor	r25, r25
 bfa:	b7 51       	subi	r27, 0x17	; 23
 bfc:	a0 f0       	brcs	.+40     	; 0xc26 <__fixunssfsi+0x38>
 bfe:	d1 f0       	breq	.+52     	; 0xc34 <__fixunssfsi+0x46>
 c00:	66 0f       	add	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	99 1f       	adc	r25, r25
 c08:	1a f0       	brmi	.+6      	; 0xc10 <__fixunssfsi+0x22>
 c0a:	ba 95       	dec	r27
 c0c:	c9 f7       	brne	.-14     	; 0xc00 <__fixunssfsi+0x12>
 c0e:	12 c0       	rjmp	.+36     	; 0xc34 <__fixunssfsi+0x46>
 c10:	b1 30       	cpi	r27, 0x01	; 1
 c12:	81 f0       	breq	.+32     	; 0xc34 <__fixunssfsi+0x46>
 c14:	9f d0       	rcall	.+318    	; 0xd54 <__fp_zero>
 c16:	b1 e0       	ldi	r27, 0x01	; 1
 c18:	08 95       	ret
 c1a:	9c c0       	rjmp	.+312    	; 0xd54 <__fp_zero>
 c1c:	67 2f       	mov	r22, r23
 c1e:	78 2f       	mov	r23, r24
 c20:	88 27       	eor	r24, r24
 c22:	b8 5f       	subi	r27, 0xF8	; 248
 c24:	39 f0       	breq	.+14     	; 0xc34 <__fixunssfsi+0x46>
 c26:	b9 3f       	cpi	r27, 0xF9	; 249
 c28:	cc f3       	brlt	.-14     	; 0xc1c <__fixunssfsi+0x2e>
 c2a:	86 95       	lsr	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	b3 95       	inc	r27
 c32:	d9 f7       	brne	.-10     	; 0xc2a <__fixunssfsi+0x3c>
 c34:	3e f4       	brtc	.+14     	; 0xc44 <__fixunssfsi+0x56>
 c36:	90 95       	com	r25
 c38:	80 95       	com	r24
 c3a:	70 95       	com	r23
 c3c:	61 95       	neg	r22
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	08 95       	ret

00000c46 <__floatunsisf>:
 c46:	e8 94       	clt
 c48:	09 c0       	rjmp	.+18     	; 0xc5c <__floatsisf+0x12>

00000c4a <__floatsisf>:
 c4a:	97 fb       	bst	r25, 7
 c4c:	3e f4       	brtc	.+14     	; 0xc5c <__floatsisf+0x12>
 c4e:	90 95       	com	r25
 c50:	80 95       	com	r24
 c52:	70 95       	com	r23
 c54:	61 95       	neg	r22
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	99 23       	and	r25, r25
 c5e:	a9 f0       	breq	.+42     	; 0xc8a <__floatsisf+0x40>
 c60:	f9 2f       	mov	r31, r25
 c62:	96 e9       	ldi	r25, 0x96	; 150
 c64:	bb 27       	eor	r27, r27
 c66:	93 95       	inc	r25
 c68:	f6 95       	lsr	r31
 c6a:	87 95       	ror	r24
 c6c:	77 95       	ror	r23
 c6e:	67 95       	ror	r22
 c70:	b7 95       	ror	r27
 c72:	f1 11       	cpse	r31, r1
 c74:	f8 cf       	rjmp	.-16     	; 0xc66 <__floatsisf+0x1c>
 c76:	fa f4       	brpl	.+62     	; 0xcb6 <__floatsisf+0x6c>
 c78:	bb 0f       	add	r27, r27
 c7a:	11 f4       	brne	.+4      	; 0xc80 <__floatsisf+0x36>
 c7c:	60 ff       	sbrs	r22, 0
 c7e:	1b c0       	rjmp	.+54     	; 0xcb6 <__floatsisf+0x6c>
 c80:	6f 5f       	subi	r22, 0xFF	; 255
 c82:	7f 4f       	sbci	r23, 0xFF	; 255
 c84:	8f 4f       	sbci	r24, 0xFF	; 255
 c86:	9f 4f       	sbci	r25, 0xFF	; 255
 c88:	16 c0       	rjmp	.+44     	; 0xcb6 <__floatsisf+0x6c>
 c8a:	88 23       	and	r24, r24
 c8c:	11 f0       	breq	.+4      	; 0xc92 <__floatsisf+0x48>
 c8e:	96 e9       	ldi	r25, 0x96	; 150
 c90:	11 c0       	rjmp	.+34     	; 0xcb4 <__floatsisf+0x6a>
 c92:	77 23       	and	r23, r23
 c94:	21 f0       	breq	.+8      	; 0xc9e <__floatsisf+0x54>
 c96:	9e e8       	ldi	r25, 0x8E	; 142
 c98:	87 2f       	mov	r24, r23
 c9a:	76 2f       	mov	r23, r22
 c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__floatsisf+0x5e>
 c9e:	66 23       	and	r22, r22
 ca0:	71 f0       	breq	.+28     	; 0xcbe <__floatsisf+0x74>
 ca2:	96 e8       	ldi	r25, 0x86	; 134
 ca4:	86 2f       	mov	r24, r22
 ca6:	70 e0       	ldi	r23, 0x00	; 0
 ca8:	60 e0       	ldi	r22, 0x00	; 0
 caa:	2a f0       	brmi	.+10     	; 0xcb6 <__floatsisf+0x6c>
 cac:	9a 95       	dec	r25
 cae:	66 0f       	add	r22, r22
 cb0:	77 1f       	adc	r23, r23
 cb2:	88 1f       	adc	r24, r24
 cb4:	da f7       	brpl	.-10     	; 0xcac <__floatsisf+0x62>
 cb6:	88 0f       	add	r24, r24
 cb8:	96 95       	lsr	r25
 cba:	87 95       	ror	r24
 cbc:	97 f9       	bld	r25, 7
 cbe:	08 95       	ret

00000cc0 <__fp_inf>:
 cc0:	97 f9       	bld	r25, 7
 cc2:	9f 67       	ori	r25, 0x7F	; 127
 cc4:	80 e8       	ldi	r24, 0x80	; 128
 cc6:	70 e0       	ldi	r23, 0x00	; 0
 cc8:	60 e0       	ldi	r22, 0x00	; 0
 cca:	08 95       	ret

00000ccc <__fp_nan>:
 ccc:	9f ef       	ldi	r25, 0xFF	; 255
 cce:	80 ec       	ldi	r24, 0xC0	; 192
 cd0:	08 95       	ret

00000cd2 <__fp_pscA>:
 cd2:	00 24       	eor	r0, r0
 cd4:	0a 94       	dec	r0
 cd6:	16 16       	cp	r1, r22
 cd8:	17 06       	cpc	r1, r23
 cda:	18 06       	cpc	r1, r24
 cdc:	09 06       	cpc	r0, r25
 cde:	08 95       	ret

00000ce0 <__fp_pscB>:
 ce0:	00 24       	eor	r0, r0
 ce2:	0a 94       	dec	r0
 ce4:	12 16       	cp	r1, r18
 ce6:	13 06       	cpc	r1, r19
 ce8:	14 06       	cpc	r1, r20
 cea:	05 06       	cpc	r0, r21
 cec:	08 95       	ret

00000cee <__fp_round>:
 cee:	09 2e       	mov	r0, r25
 cf0:	03 94       	inc	r0
 cf2:	00 0c       	add	r0, r0
 cf4:	11 f4       	brne	.+4      	; 0xcfa <__fp_round+0xc>
 cf6:	88 23       	and	r24, r24
 cf8:	52 f0       	brmi	.+20     	; 0xd0e <__fp_round+0x20>
 cfa:	bb 0f       	add	r27, r27
 cfc:	40 f4       	brcc	.+16     	; 0xd0e <__fp_round+0x20>
 cfe:	bf 2b       	or	r27, r31
 d00:	11 f4       	brne	.+4      	; 0xd06 <__fp_round+0x18>
 d02:	60 ff       	sbrs	r22, 0
 d04:	04 c0       	rjmp	.+8      	; 0xd0e <__fp_round+0x20>
 d06:	6f 5f       	subi	r22, 0xFF	; 255
 d08:	7f 4f       	sbci	r23, 0xFF	; 255
 d0a:	8f 4f       	sbci	r24, 0xFF	; 255
 d0c:	9f 4f       	sbci	r25, 0xFF	; 255
 d0e:	08 95       	ret

00000d10 <__fp_split3>:
 d10:	57 fd       	sbrc	r21, 7
 d12:	90 58       	subi	r25, 0x80	; 128
 d14:	44 0f       	add	r20, r20
 d16:	55 1f       	adc	r21, r21
 d18:	59 f0       	breq	.+22     	; 0xd30 <__fp_splitA+0x10>
 d1a:	5f 3f       	cpi	r21, 0xFF	; 255
 d1c:	71 f0       	breq	.+28     	; 0xd3a <__fp_splitA+0x1a>
 d1e:	47 95       	ror	r20

00000d20 <__fp_splitA>:
 d20:	88 0f       	add	r24, r24
 d22:	97 fb       	bst	r25, 7
 d24:	99 1f       	adc	r25, r25
 d26:	61 f0       	breq	.+24     	; 0xd40 <__fp_splitA+0x20>
 d28:	9f 3f       	cpi	r25, 0xFF	; 255
 d2a:	79 f0       	breq	.+30     	; 0xd4a <__fp_splitA+0x2a>
 d2c:	87 95       	ror	r24
 d2e:	08 95       	ret
 d30:	12 16       	cp	r1, r18
 d32:	13 06       	cpc	r1, r19
 d34:	14 06       	cpc	r1, r20
 d36:	55 1f       	adc	r21, r21
 d38:	f2 cf       	rjmp	.-28     	; 0xd1e <__fp_split3+0xe>
 d3a:	46 95       	lsr	r20
 d3c:	f1 df       	rcall	.-30     	; 0xd20 <__fp_splitA>
 d3e:	08 c0       	rjmp	.+16     	; 0xd50 <__fp_splitA+0x30>
 d40:	16 16       	cp	r1, r22
 d42:	17 06       	cpc	r1, r23
 d44:	18 06       	cpc	r1, r24
 d46:	99 1f       	adc	r25, r25
 d48:	f1 cf       	rjmp	.-30     	; 0xd2c <__fp_splitA+0xc>
 d4a:	86 95       	lsr	r24
 d4c:	71 05       	cpc	r23, r1
 d4e:	61 05       	cpc	r22, r1
 d50:	08 94       	sec
 d52:	08 95       	ret

00000d54 <__fp_zero>:
 d54:	e8 94       	clt

00000d56 <__fp_szero>:
 d56:	bb 27       	eor	r27, r27
 d58:	66 27       	eor	r22, r22
 d5a:	77 27       	eor	r23, r23
 d5c:	cb 01       	movw	r24, r22
 d5e:	97 f9       	bld	r25, 7
 d60:	08 95       	ret

00000d62 <__mulsf3>:
 d62:	0b d0       	rcall	.+22     	; 0xd7a <__mulsf3x>
 d64:	c4 cf       	rjmp	.-120    	; 0xcee <__fp_round>
 d66:	b5 df       	rcall	.-150    	; 0xcd2 <__fp_pscA>
 d68:	28 f0       	brcs	.+10     	; 0xd74 <__mulsf3+0x12>
 d6a:	ba df       	rcall	.-140    	; 0xce0 <__fp_pscB>
 d6c:	18 f0       	brcs	.+6      	; 0xd74 <__mulsf3+0x12>
 d6e:	95 23       	and	r25, r21
 d70:	09 f0       	breq	.+2      	; 0xd74 <__mulsf3+0x12>
 d72:	a6 cf       	rjmp	.-180    	; 0xcc0 <__fp_inf>
 d74:	ab cf       	rjmp	.-170    	; 0xccc <__fp_nan>
 d76:	11 24       	eor	r1, r1
 d78:	ee cf       	rjmp	.-36     	; 0xd56 <__fp_szero>

00000d7a <__mulsf3x>:
 d7a:	ca df       	rcall	.-108    	; 0xd10 <__fp_split3>
 d7c:	a0 f3       	brcs	.-24     	; 0xd66 <__mulsf3+0x4>

00000d7e <__mulsf3_pse>:
 d7e:	95 9f       	mul	r25, r21
 d80:	d1 f3       	breq	.-12     	; 0xd76 <__mulsf3+0x14>
 d82:	95 0f       	add	r25, r21
 d84:	50 e0       	ldi	r21, 0x00	; 0
 d86:	55 1f       	adc	r21, r21
 d88:	62 9f       	mul	r22, r18
 d8a:	f0 01       	movw	r30, r0
 d8c:	72 9f       	mul	r23, r18
 d8e:	bb 27       	eor	r27, r27
 d90:	f0 0d       	add	r31, r0
 d92:	b1 1d       	adc	r27, r1
 d94:	63 9f       	mul	r22, r19
 d96:	aa 27       	eor	r26, r26
 d98:	f0 0d       	add	r31, r0
 d9a:	b1 1d       	adc	r27, r1
 d9c:	aa 1f       	adc	r26, r26
 d9e:	64 9f       	mul	r22, r20
 da0:	66 27       	eor	r22, r22
 da2:	b0 0d       	add	r27, r0
 da4:	a1 1d       	adc	r26, r1
 da6:	66 1f       	adc	r22, r22
 da8:	82 9f       	mul	r24, r18
 daa:	22 27       	eor	r18, r18
 dac:	b0 0d       	add	r27, r0
 dae:	a1 1d       	adc	r26, r1
 db0:	62 1f       	adc	r22, r18
 db2:	73 9f       	mul	r23, r19
 db4:	b0 0d       	add	r27, r0
 db6:	a1 1d       	adc	r26, r1
 db8:	62 1f       	adc	r22, r18
 dba:	83 9f       	mul	r24, r19
 dbc:	a0 0d       	add	r26, r0
 dbe:	61 1d       	adc	r22, r1
 dc0:	22 1f       	adc	r18, r18
 dc2:	74 9f       	mul	r23, r20
 dc4:	33 27       	eor	r19, r19
 dc6:	a0 0d       	add	r26, r0
 dc8:	61 1d       	adc	r22, r1
 dca:	23 1f       	adc	r18, r19
 dcc:	84 9f       	mul	r24, r20
 dce:	60 0d       	add	r22, r0
 dd0:	21 1d       	adc	r18, r1
 dd2:	82 2f       	mov	r24, r18
 dd4:	76 2f       	mov	r23, r22
 dd6:	6a 2f       	mov	r22, r26
 dd8:	11 24       	eor	r1, r1
 dda:	9f 57       	subi	r25, 0x7F	; 127
 ddc:	50 40       	sbci	r21, 0x00	; 0
 dde:	8a f0       	brmi	.+34     	; 0xe02 <__mulsf3_pse+0x84>
 de0:	e1 f0       	breq	.+56     	; 0xe1a <__mulsf3_pse+0x9c>
 de2:	88 23       	and	r24, r24
 de4:	4a f0       	brmi	.+18     	; 0xdf8 <__mulsf3_pse+0x7a>
 de6:	ee 0f       	add	r30, r30
 de8:	ff 1f       	adc	r31, r31
 dea:	bb 1f       	adc	r27, r27
 dec:	66 1f       	adc	r22, r22
 dee:	77 1f       	adc	r23, r23
 df0:	88 1f       	adc	r24, r24
 df2:	91 50       	subi	r25, 0x01	; 1
 df4:	50 40       	sbci	r21, 0x00	; 0
 df6:	a9 f7       	brne	.-22     	; 0xde2 <__mulsf3_pse+0x64>
 df8:	9e 3f       	cpi	r25, 0xFE	; 254
 dfa:	51 05       	cpc	r21, r1
 dfc:	70 f0       	brcs	.+28     	; 0xe1a <__mulsf3_pse+0x9c>
 dfe:	60 cf       	rjmp	.-320    	; 0xcc0 <__fp_inf>
 e00:	aa cf       	rjmp	.-172    	; 0xd56 <__fp_szero>
 e02:	5f 3f       	cpi	r21, 0xFF	; 255
 e04:	ec f3       	brlt	.-6      	; 0xe00 <__mulsf3_pse+0x82>
 e06:	98 3e       	cpi	r25, 0xE8	; 232
 e08:	dc f3       	brlt	.-10     	; 0xe00 <__mulsf3_pse+0x82>
 e0a:	86 95       	lsr	r24
 e0c:	77 95       	ror	r23
 e0e:	67 95       	ror	r22
 e10:	b7 95       	ror	r27
 e12:	f7 95       	ror	r31
 e14:	e7 95       	ror	r30
 e16:	9f 5f       	subi	r25, 0xFF	; 255
 e18:	c1 f7       	brne	.-16     	; 0xe0a <__mulsf3_pse+0x8c>
 e1a:	fe 2b       	or	r31, r30
 e1c:	88 0f       	add	r24, r24
 e1e:	91 1d       	adc	r25, r1
 e20:	96 95       	lsr	r25
 e22:	87 95       	ror	r24
 e24:	97 f9       	bld	r25, 7
 e26:	08 95       	ret

00000e28 <__udivmodhi4>:
 e28:	aa 1b       	sub	r26, r26
 e2a:	bb 1b       	sub	r27, r27
 e2c:	51 e1       	ldi	r21, 0x11	; 17
 e2e:	07 c0       	rjmp	.+14     	; 0xe3e <__udivmodhi4_ep>

00000e30 <__udivmodhi4_loop>:
 e30:	aa 1f       	adc	r26, r26
 e32:	bb 1f       	adc	r27, r27
 e34:	a6 17       	cp	r26, r22
 e36:	b7 07       	cpc	r27, r23
 e38:	10 f0       	brcs	.+4      	; 0xe3e <__udivmodhi4_ep>
 e3a:	a6 1b       	sub	r26, r22
 e3c:	b7 0b       	sbc	r27, r23

00000e3e <__udivmodhi4_ep>:
 e3e:	88 1f       	adc	r24, r24
 e40:	99 1f       	adc	r25, r25
 e42:	5a 95       	dec	r21
 e44:	a9 f7       	brne	.-22     	; 0xe30 <__udivmodhi4_loop>
 e46:	80 95       	com	r24
 e48:	90 95       	com	r25
 e4a:	bc 01       	movw	r22, r24
 e4c:	cd 01       	movw	r24, r26
 e4e:	08 95       	ret

00000e50 <__divmodhi4>:
 e50:	97 fb       	bst	r25, 7
 e52:	09 2e       	mov	r0, r25
 e54:	07 26       	eor	r0, r23
 e56:	0a d0       	rcall	.+20     	; 0xe6c <__divmodhi4_neg1>
 e58:	77 fd       	sbrc	r23, 7
 e5a:	04 d0       	rcall	.+8      	; 0xe64 <__divmodhi4_neg2>
 e5c:	e5 df       	rcall	.-54     	; 0xe28 <__udivmodhi4>
 e5e:	06 d0       	rcall	.+12     	; 0xe6c <__divmodhi4_neg1>
 e60:	00 20       	and	r0, r0
 e62:	1a f4       	brpl	.+6      	; 0xe6a <__divmodhi4_exit>

00000e64 <__divmodhi4_neg2>:
 e64:	70 95       	com	r23
 e66:	61 95       	neg	r22
 e68:	7f 4f       	sbci	r23, 0xFF	; 255

00000e6a <__divmodhi4_exit>:
 e6a:	08 95       	ret

00000e6c <__divmodhi4_neg1>:
 e6c:	f6 f7       	brtc	.-4      	; 0xe6a <__divmodhi4_exit>
 e6e:	90 95       	com	r25
 e70:	81 95       	neg	r24
 e72:	9f 4f       	sbci	r25, 0xFF	; 255
 e74:	08 95       	ret

00000e76 <_exit>:
 e76:	f8 94       	cli

00000e78 <__stop_program>:
 e78:	ff cf       	rjmp	.-2      	; 0xe78 <__stop_program>
