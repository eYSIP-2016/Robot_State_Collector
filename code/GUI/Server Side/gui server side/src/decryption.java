
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ansh-hp
 */
public class decryption extends javax.swing.JFrame  {
    
    static ServerSocket s;

    /**
     * Creates new form decryption
     */
    public decryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Decrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(jButton1)
                .addContainerGap(150, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(jButton1)
                .addContainerGap(142, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
        Reads the Certificate from the KeyStore and generates the KeyPair and returns it
     */
    public static KeyPair getkey() throws Exception {

        FileInputStream is = new FileInputStream("keyStoreName.jceks");

        KeyStore keystore = KeyStore.getInstance("JCEKS");
        keystore.load(is, "EYSIP2016".toCharArray());

        String alias = "Private Key";
        KeyPair keyPair = null;

        Key key = keystore.getKey(alias, "EYSIP2016".toCharArray());
        if (key instanceof PrivateKey) {
            // Get certificate of public key
            Certificate cert = keystore.getCertificate(alias);

            // Get public key
            PublicKey publicKey = cert.getPublicKey();

            // Return a key pair
            keyPair = new KeyPair(publicKey, (PrivateKey) key);
        }

        return keyPair;
    }

    /*
    Reads the encrypted AES Key byte stream from "AESKey.txt" and decrypts the same using the Private Key
    Then it recreates the AES Key from the decrypted byte stream. 
    Utilises the recreated key to decrypt the data stored in "output.txt" and stores the decrypted data in "decp.txt"
     */
                                

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         try {

            KeyPair kp = getkey();
            RandomAccessFile f = new RandomAccessFile("AESKey.txt", "r");
            byte[] b = new byte[(int) f.length()];
            f.read(b);
            Cipher desCipher;
            desCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            desCipher.init(Cipher.DECRYPT_MODE, kp.getPrivate());
            byte[] textDecrypted = desCipher.doFinal(b);
             Key myDesKey = new SecretKeySpec(textDecrypted, 0, textDecrypted.length, "AES");

            String stringKey = myDesKey.toString();
            System.out.println("read Key: " + stringKey);

            desCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");

            f = new RandomAccessFile("output.txt", "r");
            System.out.println(f.length());
            b = new byte[(int) f.length()];
            f.read(b);
            System.out.println(b.length);
            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);
            textDecrypted = desCipher.doFinal(b);
            FileOutputStream fos = new FileOutputStream("decp.txt");
            fos.write(textDecrypted);
            fos.close();

        } catch (Exception e) {
            System.out.println("Exception" + e.toString());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(decryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        s=new ServerSocket(2425);
       
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new decryption().setVisible(true);
            }
        });
    }
    
    public void run() {
    try {
     byte[] x = null;
       Socket s1=s.accept();
       System.out.println("HI");
        Scanner sc=new Scanner(s1.getInputStream());
        System.out.println("Bye");
        byte[] b= new byte [sc.nextByte()]; 
        System.arraycopy(b, 0, x, b.length, x.length);
        System.out.println(x.length);
        FileOutputStream fos = new FileOutputStream("AESKey.txt");
            fos.write(x);
            fos.close();
    }catch(IOException e){
        System.out.println(e);
    }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
